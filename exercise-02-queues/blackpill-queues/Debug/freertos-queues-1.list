
freertos-queues-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b38  08004b38  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000060  08004ba0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041c8  08004ba0  000241c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d674  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255a  00000000  00000000  0002d747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000928  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017186  00000000  00000000  000311d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e59f  00000000  00000000  00048356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d829  00000000  00000000  000568f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000350c  00000000  00000000  000e4120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004994 	.word	0x08004994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004994 	.word	0x08004994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b098      	sub	sp, #96	; 0x60
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 faa1 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f879 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f901 	bl	80007d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f8d5 	bl	8000780 <MX_USART1_UART_Init>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  //  simple queue
  simpleQueue = xQueueCreate(5, sizeof(int));
 80005d6:	2200      	movs	r2, #0
 80005d8:	2104      	movs	r1, #4
 80005da:	2005      	movs	r0, #5
 80005dc:	f001 ff28 	bl	8002430 <xQueueGenericCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <main+0xd8>)
 80005e4:	6013      	str	r3, [r2, #0]

  if(simpleQueue == 0) {
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0xd8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d10d      	bne.n	800060a <main+0x4a>
	  char* str = "unable to create queue\n";
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <main+0xdc>)
 80005f0:	65bb      	str	r3, [r7, #88]	; 0x58
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80005f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80005f4:	f7ff fdf4 	bl	80001e0 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000602:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0xe0>)
 8000604:	f001 fa03 	bl	8001a0e <HAL_UART_Transmit>
 8000608:	e00c      	b.n	8000624 <main+0x64>
  } else {
	  char* str = "Integer queue created successfully\n";
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0xe4>)
 800060c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800060e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000610:	f7ff fde6 	bl	80001e0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <main+0xe0>)
 8000620:	f001 f9f5 	bl	8001a0e <HAL_UART_Transmit>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0xe8>)
 8000626:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fd79 	bl	8002136 <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a19      	ldr	r2, [pc, #100]	; (80006ac <main+0xec>)
 8000648:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // sender thread
  osThreadDef(senderTask, sendingTask, osPriorityNormal, 0, 128);
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <main+0xf0>)
 800064c:	f107 0420 	add.w	r4, r7, #32
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  senderTaskHandle = osThreadCreate(osThread(senderTask), NULL);
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fd66 	bl	8002136 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <main+0xf4>)
 800066e:	6013      	str	r3, [r2, #0]

  // receiver thread
  osThreadDef(receiverTask, receivingTask, osPriorityNormal, 0, 128);
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <main+0xf8>)
 8000672:	1d3c      	adds	r4, r7, #4
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiverTaskHandle = osThreadCreate(osThread(receiverTask), NULL);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd55 	bl	8002136 <osThreadCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0xfc>)
 8000690:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f001 fd49 	bl	8002128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0xd6>
 8000698:	20000320 	.word	0x20000320
 800069c:	080049ac 	.word	0x080049ac
 80006a0:	200002d0 	.word	0x200002d0
 80006a4:	080049c4 	.word	0x080049c4
 80006a8:	080049f4 	.word	0x080049f4
 80006ac:	20000314 	.word	0x20000314
 80006b0:	08004a1c 	.word	0x08004a1c
 80006b4:	20000318 	.word	0x20000318
 80006b8:	08004a48 	.word	0x08004a48
 80006bc:	2000031c 	.word	0x2000031c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fcdc 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xb8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <SystemClock_Config+0xb8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xb8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <SystemClock_Config+0xbc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemClock_Config+0xbc>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <SystemClock_Config+0xbc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fcc5 	bl	80010c4 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000740:	f000 f8d4 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ff28 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800076a:	f000 f8bf 	bl	80008ec <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART1_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b8:	f001 f8dc 	bl	8001974 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f893 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002d0 	.word	0x200002d0
 80007d0:	40011000 	.word	0x40011000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_GPIO_Init+0x30>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x30>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <sendingTask>:

/* USER CODE BEGIN 4 */

// sending task
void sendingTask(void const * argument){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

	int y = 122;
 8000810:	237a      	movs	r3, #122	; 0x7a
 8000812:	60fb      	str	r3, [r7, #12]
	uint32_t tickDelay = pdMS_TO_TICKS(2000);
 8000814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000818:	617b      	str	r3, [r7, #20]

	while(1) {
		if(xQueueSend(simpleQueue, &y, portMAX_DELAY) == pdPASS){
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <sendingTask+0x4c>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	f107 010c 	add.w	r1, r7, #12
 8000822:	2300      	movs	r3, #0
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	f001 fe5c 	bl	80024e4 <xQueueGenericSend>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d10c      	bne.n	800084c <sendingTask+0x44>
			char *str2 = " Successfully sent the number to the queue\nLeaving SENDER_HPT Task\n\n\n";
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <sendingTask+0x50>)
 8000834:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart1, (uint8_t*)str2, strlen(str2), HAL_MAX_DELAY);
 8000836:	6938      	ldr	r0, [r7, #16]
 8000838:	f7ff fcd2 	bl	80001e0 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	6939      	ldr	r1, [r7, #16]
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <sendingTask+0x54>)
 8000848:	f001 f8e1 	bl	8001a0e <HAL_UART_Transmit>
		}
		vTaskDelay(tickDelay);
 800084c:	6978      	ldr	r0, [r7, #20]
 800084e:	f002 facb 	bl	8002de8 <vTaskDelay>
		if(xQueueSend(simpleQueue, &y, portMAX_DELAY) == pdPASS){
 8000852:	e7e2      	b.n	800081a <sendingTask+0x12>
 8000854:	20000320 	.word	0x20000320
 8000858:	08004a64 	.word	0x08004a64
 800085c:	200002d0 	.word	0x200002d0

08000860 <receivingTask>:
	}
}

// receiving task
void receivingTask(void const * argument){
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	int received = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
	uint32_t tickDelay = pdMS_TO_TICKS(3000);
 800086c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
	while(1) {
		if(xQueueReceive(simpleQueue, &received, portMAX_DELAY) != pdTRUE) {
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <receivingTask+0x6c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f107 0120 	add.w	r1, r7, #32
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	4618      	mov	r0, r3
 8000880:	f001 ff2e 	bl	80026e0 <xQueueReceive>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d007      	beq.n	800089a <receivingTask+0x3a>
			HAL_UART_Transmit(&huart1, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 1000);
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	221f      	movs	r2, #31
 8000890:	490f      	ldr	r1, [pc, #60]	; (80008d0 <receivingTask+0x70>)
 8000892:	4810      	ldr	r0, [pc, #64]	; (80008d4 <receivingTask+0x74>)
 8000894:	f001 f8bb 	bl	8001a0e <HAL_UART_Transmit>
 8000898:	e014      	b.n	80008c4 <receivingTask+0x64>
		} else {
			char str[20];
			sprintf(str, "Received %d \r\n", received);
 800089a:	6a3a      	ldr	r2, [r7, #32]
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	490d      	ldr	r1, [pc, #52]	; (80008d8 <receivingTask+0x78>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fbd2 	bl	800404c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fc97 	bl	80001e0 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f107 010c 	add.w	r1, r7, #12
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <receivingTask+0x74>)
 80008c0:	f001 f8a5 	bl	8001a0e <HAL_UART_Transmit>
		}
		vTaskDelay(tickDelay);
 80008c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008c6:	f002 fa8f 	bl	8002de8 <vTaskDelay>
		if(xQueueReceive(simpleQueue, &received, portMAX_DELAY) != pdTRUE) {
 80008ca:	e7d2      	b.n	8000872 <receivingTask+0x12>
 80008cc:	20000320 	.word	0x20000320
 80008d0:	08004aac 	.word	0x08004aac
 80008d4:	200002d0 	.word	0x200002d0
 80008d8:	08004acc 	.word	0x08004acc

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fc72 	bl	80021ce <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartDefaultTask+0x8>

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fa14 	bl	8000d6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12c      	bne.n	80009cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009bc:	2307      	movs	r3, #7
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009c8:	f000 f9f8 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40011000 	.word	0x40011000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f8ce 	bl	8000bb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a14:	f002 fe1a 	bl	800364c <xTaskGetSchedulerState>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d001      	beq.n	8000a22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a1e:	f003 f8db 	bl	8003bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f003 fb20 	bl	800409c <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20010000 	.word	0x20010000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	20000324 	.word	0x20000324
 8000a90:	200041c8 	.word	0x200041c8

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f003 fadf 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd69 	bl	80005c0 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000afc:	08004b40 	.word	0x08004b40
  ldr r2, =_sbss
 8000b00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b04:	200041c8 	.word	0x200041c8

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f90d 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff feda 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f917 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f8ed 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000328 	.word	0x20000328

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000328 	.word	0x20000328

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff47 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5c 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e159      	b.n	800108c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8148 	bne.w	8001086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d005      	beq.n	8000e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d130      	bne.n	8000e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d017      	beq.n	8000eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a2 	beq.w	8001086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x2f0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x202>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x2f4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1fe>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_GPIO_Init+0x2f8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1f6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1f2>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	4935      	ldr	r1, [pc, #212]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001002:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800102c:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001080:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f67f aea2 	bls.w	8000dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40013800 	.word	0x40013800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e267      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d075      	beq.n	80011ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d00c      	beq.n	8001108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ee:	4b85      	ldr	r3, [pc, #532]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d112      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001106:	d10b      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b7e      	ldr	r3, [pc, #504]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d05b      	beq.n	80011cc <HAL_RCC_OscConfig+0x108>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d157      	bne.n	80011cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e242      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x74>
 800112a:	4b76      	ldr	r3, [pc, #472]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a75      	ldr	r2, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x98>
 8001142:	4b70      	ldr	r3, [pc, #448]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6f      	ldr	r2, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6d      	ldr	r3, [pc, #436]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6c      	ldr	r2, [pc, #432]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 800115c:	4b69      	ldr	r3, [pc, #420]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a68      	ldr	r2, [pc, #416]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a65      	ldr	r2, [pc, #404]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fd2c 	bl	8000bd8 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fd28 	bl	8000bd8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e207      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xc0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fd18 	bl	8000bd8 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fd14 	bl	8000bd8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1f3      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0xe8>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f2:	4b44      	ldr	r3, [pc, #272]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4937      	ldr	r1, [pc, #220]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <HAL_RCC_OscConfig+0x244>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fccd 	bl	8000bd8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fcc9 	bl	8000bd8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a8      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4925      	ldr	r1, [pc, #148]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x244>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fcac 	bl	8000bd8 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fca8 	bl	8000bd8 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e187      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d016      	beq.n	80012e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x248>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fc8c 	bl	8000bd8 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc88 	bl	8000bd8 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e167      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x240>)
 80012d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x200>
 80012e2:	e01b      	b.n	800131c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_RCC_OscConfig+0x248>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fc75 	bl	8000bd8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	e00e      	b.n	8001310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc71 	bl	8000bd8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d907      	bls.n	8001310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e150      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001304:	40023800 	.word	0x40023800
 8001308:	42470000 	.word	0x42470000
 800130c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ea      	bne.n	80012f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8097 	beq.w	8001458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a7c      	ldr	r2, [pc, #496]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b77      	ldr	r3, [pc, #476]	; (8001538 <HAL_RCC_OscConfig+0x474>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b74      	ldr	r3, [pc, #464]	; (8001538 <HAL_RCC_OscConfig+0x474>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a73      	ldr	r2, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x474>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fc31 	bl	8000bd8 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fc2d 	bl	8000bd8 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e10c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x474>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x2ea>
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a4:	4a63      	ldr	r2, [pc, #396]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	; 0x70
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x30c>
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a5e      	ldr	r2, [pc, #376]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a57      	ldr	r2, [pc, #348]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
 80013dc:	4b55      	ldr	r3, [pc, #340]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff fbf2 	bl	8000bd8 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fbee 	bl	8000bd8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	; 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0cb      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ee      	beq.n	80013f8 <HAL_RCC_OscConfig+0x334>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fbdc 	bl	8000bd8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fbd8 	bl	8000bd8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0b5      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143a:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ee      	bne.n	8001424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a1 	beq.w	80015a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b08      	cmp	r3, #8
 800146c:	d05c      	beq.n	8001528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d141      	bne.n	80014fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_RCC_OscConfig+0x478>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fbac 	bl	8000bd8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fba8 	bl	8000bd8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e087      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b01      	subs	r3, #1
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	491b      	ldr	r1, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x478>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb81 	bl	8000bd8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb7d 	bl	8000bd8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e05c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x416>
 80014f8:	e054      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x478>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb6a 	bl	8000bd8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fb66 	bl	8000bd8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_OscConfig+0x470>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x444>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e038      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000
 800153c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x4ec>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d028      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d121      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d11a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001578:	4293      	cmp	r3, r2
 800157a:	d111      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0cc      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d90c      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b65      	ldr	r3, [pc, #404]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800162a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d044      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d119      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d003      	beq.n	8001672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	2b03      	cmp	r3, #3
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e067      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4934      	ldr	r1, [pc, #208]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa98 	bl	8000bd8 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa94 	bl	8000bd8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e04f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20c      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f9f8 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00
 8001770:	40023800 	.word	0x40023800
 8001774:	08004ae4 	.word	0x08004ae4
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001784:	b090      	sub	sp, #64	; 0x40
 8001786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d00d      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x40>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	f200 80a1 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x16c>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x3a>
 80017b2:	e09b      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_GetSysClockFreq+0x184>)
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017b8:	e09b      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ba:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017be:	e098      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ca:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d028      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	2200      	movs	r2, #0
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	627a      	str	r2, [r7, #36]	; 0x24
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017e8:	2100      	movs	r1, #0
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017ec:	fb03 f201 	mul.w	r2, r3, r1
 80017f0:	2300      	movs	r3, #0
 80017f2:	fb00 f303 	mul.w	r3, r0, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	4a43      	ldr	r2, [pc, #268]	; (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017fa:	fba0 1202 	umull	r1, r2, r0, r2
 80017fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001800:	460a      	mov	r2, r1
 8001802:	62ba      	str	r2, [r7, #40]	; 0x28
 8001804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001806:	4413      	add	r3, r2
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	2200      	movs	r2, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	61fa      	str	r2, [r7, #28]
 8001812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800181a:	f7fe fd39 	bl	8000290 <__aeabi_uldivmod>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4613      	mov	r3, r2
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001826:	e053      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	2200      	movs	r2, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	617a      	str	r2, [r7, #20]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800183a:	f04f 0b00 	mov.w	fp, #0
 800183e:	4652      	mov	r2, sl
 8001840:	465b      	mov	r3, fp
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0159      	lsls	r1, r3, #5
 800184c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001850:	0150      	lsls	r0, r2, #5
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ebb2 080a 	subs.w	r8, r2, sl
 800185a:	eb63 090b 	sbc.w	r9, r3, fp
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800186a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800186e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001872:	ebb2 0408 	subs.w	r4, r2, r8
 8001876:	eb63 0509 	sbc.w	r5, r3, r9
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	00eb      	lsls	r3, r5, #3
 8001884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001888:	00e2      	lsls	r2, r4, #3
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	eb14 030a 	adds.w	r3, r4, sl
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	eb45 030b 	adc.w	r3, r5, fp
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	2200      	movs	r2, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	60fa      	str	r2, [r7, #12]
 80018c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c4:	f7fe fce4 	bl	8000290 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3740      	adds	r7, #64	; 0x40
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	00f42400 	.word	0x00f42400
 8001908:	017d7840 	.word	0x017d7840

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_GetHCLKFreq+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001928:	f7ff fff0 	bl	800190c <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	08004af4 	.word	0x08004af4

0800194c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001950:	f7ff ffdc 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0b5b      	lsrs	r3, r3, #13
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08004af4 	.word	0x08004af4

08001974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e03f      	b.n	8001a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe ffd8 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f929 	bl	8001c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08a      	sub	sp, #40	; 0x28
 8001a12:	af02      	add	r7, sp, #8
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d17c      	bne.n	8001b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_UART_Transmit+0x2c>
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e075      	b.n	8001b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_UART_Transmit+0x3e>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e06e      	b.n	8001b2a <HAL_UART_Transmit+0x11c>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2221      	movs	r2, #33	; 0x21
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a62:	f7ff f8b9 	bl	8000bd8 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7c:	d108      	bne.n	8001a90 <HAL_UART_Transmit+0x82>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	e003      	b.n	8001a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001aa0:	e02a      	b.n	8001af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f840 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e036      	b.n	8001b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e007      	b.n	8001aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1cf      	bne.n	8001aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2140      	movs	r1, #64	; 0x40
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f810 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e000      	b.n	8001b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b090      	sub	sp, #64	; 0x40
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b42:	e050      	b.n	8001be6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d04c      	beq.n	8001be6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b52:	f7ff f841 	bl	8000bd8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d241      	bcs.n	8001be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	330c      	adds	r3, #12
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	e853 3f00 	ldrex	r3, [r3]
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	330c      	adds	r3, #12
 8001b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b82:	637a      	str	r2, [r7, #52]	; 0x34
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8a:	e841 2300 	strex	r3, r2, [r1]
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e5      	bne.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3314      	adds	r3, #20
 8001b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	e853 3f00 	ldrex	r3, [r3]
 8001ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3314      	adds	r3, #20
 8001bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb6:	623a      	str	r2, [r7, #32]
 8001bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bba:	69f9      	ldr	r1, [r7, #28]
 8001bbc:	6a3a      	ldr	r2, [r7, #32]
 8001bbe:	e841 2300 	strex	r3, r2, [r1]
 8001bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1e5      	bne.n	8001b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e00f      	b.n	8001c06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d09f      	beq.n	8001b44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3740      	adds	r7, #64	; 0x40
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b0c0      	sub	sp, #256	; 0x100
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2c:	68d9      	ldr	r1, [r3, #12]
 8001c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	ea40 0301 	orr.w	r3, r0, r1
 8001c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c68:	f021 010c 	bic.w	r1, r1, #12
 8001c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c76:	430b      	orrs	r3, r1
 8001c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c8a:	6999      	ldr	r1, [r3, #24]
 8001c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	ea40 0301 	orr.w	r3, r0, r1
 8001c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b8f      	ldr	r3, [pc, #572]	; (8001edc <UART_SetConfig+0x2cc>)
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d005      	beq.n	8001cb0 <UART_SetConfig+0xa0>
 8001ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <UART_SetConfig+0x2d0>)
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d104      	bne.n	8001cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cb0:	f7ff fe4c 	bl	800194c <HAL_RCC_GetPCLK2Freq>
 8001cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001cb8:	e003      	b.n	8001cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cba:	f7ff fe33 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 8001cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ccc:	f040 810c 	bne.w	8001ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	1891      	adds	r1, r2, r2
 8001ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cea:	415b      	adcs	r3, r3
 8001cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	eb12 0801 	adds.w	r8, r2, r1
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	eb43 0901 	adc.w	r9, r3, r1
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	eb18 0303 	adds.w	r3, r8, r3
 8001d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d20:	462b      	mov	r3, r5
 8001d22:	eb49 0303 	adc.w	r3, r9, r3
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d3e:	460b      	mov	r3, r1
 8001d40:	18db      	adds	r3, r3, r3
 8001d42:	653b      	str	r3, [r7, #80]	; 0x50
 8001d44:	4613      	mov	r3, r2
 8001d46:	eb42 0303 	adc.w	r3, r2, r3
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d54:	f7fe fa9c 	bl	8000290 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <UART_SetConfig+0x2d4>)
 8001d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	011c      	lsls	r4, r3, #4
 8001d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	1891      	adds	r1, r2, r2
 8001d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d80:	415b      	adcs	r3, r3
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d88:	4641      	mov	r1, r8
 8001d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8001d8e:	4649      	mov	r1, r9
 8001d90:	eb43 0b01 	adc.w	fp, r3, r1
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001da8:	4692      	mov	sl, r2
 8001daa:	469b      	mov	fp, r3
 8001dac:	4643      	mov	r3, r8
 8001dae:	eb1a 0303 	adds.w	r3, sl, r3
 8001db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001db6:	464b      	mov	r3, r9
 8001db8:	eb4b 0303 	adc.w	r3, fp, r3
 8001dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	18db      	adds	r3, r3, r3
 8001dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8001dda:	4613      	mov	r3, r2
 8001ddc:	eb42 0303 	adc.w	r3, r2, r3
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
 8001de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dea:	f7fe fa51 	bl	8000290 <__aeabi_uldivmod>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <UART_SetConfig+0x2d4>)
 8001df6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2264      	movs	r2, #100	; 0x64
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	1acb      	subs	r3, r1, r3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <UART_SetConfig+0x2d4>)
 8001e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e18:	441c      	add	r4, r3
 8001e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e2c:	4642      	mov	r2, r8
 8001e2e:	464b      	mov	r3, r9
 8001e30:	1891      	adds	r1, r2, r2
 8001e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e34:	415b      	adcs	r3, r3
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	1851      	adds	r1, r2, r1
 8001e40:	6339      	str	r1, [r7, #48]	; 0x30
 8001e42:	4649      	mov	r1, r9
 8001e44:	414b      	adcs	r3, r1
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e54:	4659      	mov	r1, fp
 8001e56:	00cb      	lsls	r3, r1, #3
 8001e58:	4651      	mov	r1, sl
 8001e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e5e:	4651      	mov	r1, sl
 8001e60:	00ca      	lsls	r2, r1, #3
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	4642      	mov	r2, r8
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e70:	464b      	mov	r3, r9
 8001e72:	460a      	mov	r2, r1
 8001e74:	eb42 0303 	adc.w	r3, r2, r3
 8001e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e90:	460b      	mov	r3, r1
 8001e92:	18db      	adds	r3, r3, r3
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e96:	4613      	mov	r3, r2
 8001e98:	eb42 0303 	adc.w	r3, r2, r3
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001ea6:	f7fe f9f3 	bl	8000290 <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UART_SetConfig+0x2d4>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	2164      	movs	r1, #100	; 0x64
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	3332      	adds	r3, #50	; 0x32
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <UART_SetConfig+0x2d4>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	f003 0207 	and.w	r2, r3, #7
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4422      	add	r2, r4
 8001ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ed8:	e106      	b.n	80020e8 <UART_SetConfig+0x4d8>
 8001eda:	bf00      	nop
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	40011400 	.word	0x40011400
 8001ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eec:	2200      	movs	r2, #0
 8001eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001efa:	4642      	mov	r2, r8
 8001efc:	464b      	mov	r3, r9
 8001efe:	1891      	adds	r1, r2, r2
 8001f00:	6239      	str	r1, [r7, #32]
 8001f02:	415b      	adcs	r3, r3
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	1854      	adds	r4, r2, r1
 8001f0e:	4649      	mov	r1, r9
 8001f10:	eb43 0501 	adc.w	r5, r3, r1
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	00eb      	lsls	r3, r5, #3
 8001f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f22:	00e2      	lsls	r2, r4, #3
 8001f24:	4614      	mov	r4, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	4643      	mov	r3, r8
 8001f2a:	18e3      	adds	r3, r4, r3
 8001f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f30:	464b      	mov	r3, r9
 8001f32:	eb45 0303 	adc.w	r3, r5, r3
 8001f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f56:	4629      	mov	r1, r5
 8001f58:	008b      	lsls	r3, r1, #2
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f60:	4621      	mov	r1, r4
 8001f62:	008a      	lsls	r2, r1, #2
 8001f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f68:	f7fe f992 	bl	8000290 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <UART_SetConfig+0x4e4>)
 8001f72:	fba3 2302 	umull	r2, r3, r3, r2
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	011c      	lsls	r4, r3, #4
 8001f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	464b      	mov	r3, r9
 8001f90:	1891      	adds	r1, r2, r2
 8001f92:	61b9      	str	r1, [r7, #24]
 8001f94:	415b      	adcs	r3, r3
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	1851      	adds	r1, r2, r1
 8001fa0:	6139      	str	r1, [r7, #16]
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	414b      	adcs	r3, r1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb4:	4659      	mov	r1, fp
 8001fb6:	00cb      	lsls	r3, r1, #3
 8001fb8:	4651      	mov	r1, sl
 8001fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	00ca      	lsls	r2, r1, #3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4642      	mov	r2, r8
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fd0:	464b      	mov	r3, r9
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	eb42 0303 	adc.w	r3, r2, r3
 8001fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	008b      	lsls	r3, r1, #2
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ffe:	4641      	mov	r1, r8
 8002000:	008a      	lsls	r2, r1, #2
 8002002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002006:	f7fe f943 	bl	8000290 <__aeabi_uldivmod>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4611      	mov	r1, r2
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <UART_SetConfig+0x4e4>)
 8002012:	fba3 2301 	umull	r2, r3, r3, r1
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2264      	movs	r2, #100	; 0x64
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	1acb      	subs	r3, r1, r3
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <UART_SetConfig+0x4e4>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	441c      	add	r4, r3
 8002032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002036:	2200      	movs	r2, #0
 8002038:	673b      	str	r3, [r7, #112]	; 0x70
 800203a:	677a      	str	r2, [r7, #116]	; 0x74
 800203c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002040:	4642      	mov	r2, r8
 8002042:	464b      	mov	r3, r9
 8002044:	1891      	adds	r1, r2, r2
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	415b      	adcs	r3, r3
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	4641      	mov	r1, r8
 8002052:	1851      	adds	r1, r2, r1
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	4649      	mov	r1, r9
 8002058:	414b      	adcs	r3, r1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002068:	4659      	mov	r1, fp
 800206a:	00cb      	lsls	r3, r1, #3
 800206c:	4651      	mov	r1, sl
 800206e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002072:	4651      	mov	r1, sl
 8002074:	00ca      	lsls	r2, r1, #3
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	4603      	mov	r3, r0
 800207c:	4642      	mov	r2, r8
 800207e:	189b      	adds	r3, r3, r2
 8002080:	66bb      	str	r3, [r7, #104]	; 0x68
 8002082:	464b      	mov	r3, r9
 8002084:	460a      	mov	r2, r1
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	663b      	str	r3, [r7, #96]	; 0x60
 8002096:	667a      	str	r2, [r7, #100]	; 0x64
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80020a4:	4649      	mov	r1, r9
 80020a6:	008b      	lsls	r3, r1, #2
 80020a8:	4641      	mov	r1, r8
 80020aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ae:	4641      	mov	r1, r8
 80020b0:	008a      	lsls	r2, r1, #2
 80020b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020b6:	f7fe f8eb 	bl	8000290 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <UART_SetConfig+0x4e4>)
 80020c0:	fba3 1302 	umull	r1, r3, r3, r2
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	2164      	movs	r1, #100	; 0x64
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	3332      	adds	r3, #50	; 0x32
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <UART_SetConfig+0x4e4>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4422      	add	r2, r4
 80020e6:	609a      	str	r2, [r3, #8]
}
 80020e8:	bf00      	nop
 80020ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020ee:	46bd      	mov	sp, r7
 80020f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f4:	51eb851f 	.word	0x51eb851f

080020f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	2b84      	cmp	r3, #132	; 0x84
 800210c:	d005      	beq.n	800211a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800210e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	3303      	adds	r3, #3
 8002118:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800212c:	f000 fe90 	bl	8002e50 <vTaskStartScheduler>
  
  return osOK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}

08002136 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002138:	b089      	sub	sp, #36	; 0x24
 800213a:	af04      	add	r7, sp, #16
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <osThreadCreate+0x54>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685c      	ldr	r4, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691e      	ldr	r6, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffc8 	bl	80020f8 <makeFreeRtosPriority>
 8002168:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002172:	9202      	str	r2, [sp, #8]
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9100      	str	r1, [sp, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4632      	mov	r2, r6
 800217c:	4629      	mov	r1, r5
 800217e:	4620      	mov	r0, r4
 8002180:	f000 fc9e 	bl	8002ac0 <xTaskCreateStatic>
 8002184:	4603      	mov	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e01c      	b.n	80021c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685c      	ldr	r4, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002196:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffaa 	bl	80020f8 <makeFreeRtosPriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	9200      	str	r2, [sp, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4632      	mov	r2, r6
 80021b2:	4629      	mov	r1, r5
 80021b4:	4620      	mov	r0, r4
 80021b6:	f000 fce0 	bl	8002b7a <xTaskCreate>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d001      	beq.n	80021c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <osDelay+0x16>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	e000      	b.n	80021e6 <osDelay+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fdfe 	bl	8002de8 <vTaskDelay>
  
  return osOK;
 80021ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0208 	add.w	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f103 0208 	add.w	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f103 0208 	add.w	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d103      	bne.n	80022b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e00c      	b.n	80022d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3308      	adds	r3, #8
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e002      	b.n	80022c6 <vListInsert+0x2e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d2f6      	bcs.n	80022c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6852      	ldr	r2, [r2, #4]
 800232a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d103      	bne.n	800233e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002386:	bf00      	nop
 8002388:	e7fe      	b.n	8002388 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800238a:	f001 fb93 	bl	8003ab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	441a      	add	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	3b01      	subs	r3, #1
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	441a      	add	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01a      	beq.n	800241e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3310      	adds	r3, #16
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 ff71 	bl	80032d4 <xTaskRemoveFromEventList>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <xQueueGenericReset+0xcc>)
 80023fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	e009      	b.n	800241e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3310      	adds	r3, #16
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fef1 	bl	80021f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3324      	adds	r3, #36	; 0x24
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff feec 	bl	80021f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800241e:	f001 fb79 	bl	8003b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	613b      	str	r3, [r7, #16]
}
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3348      	adds	r3, #72	; 0x48
 8002468:	4618      	mov	r0, r3
 800246a:	f001 fc05 	bl	8003c78 <pvPortMalloc>
 800246e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d011      	beq.n	800249a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002488:	79fa      	ldrb	r2, [r7, #7]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f805 	bl	80024a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800249a:	69bb      	ldr	r3, [r7, #24]
	}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e002      	b.n	80024c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024d2:	2101      	movs	r1, #1
 80024d4:	69b8      	ldr	r0, [r7, #24]
 80024d6:	f7ff ff43 	bl	8002360 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	; 0x38
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericSend+0x32>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <xQueueGenericSend+0x40>
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <xQueueGenericSend+0x44>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <xQueueGenericSend+0x46>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <xQueueGenericSend+0x60>
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002540:	bf00      	nop
 8002542:	e7fe      	b.n	8002542 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d103      	bne.n	8002552 <xQueueGenericSend+0x6e>
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <xQueueGenericSend+0x72>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <xQueueGenericSend+0x74>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <xQueueGenericSend+0x8e>
	__asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	623b      	str	r3, [r7, #32]
}
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002572:	f001 f86b 	bl	800364c <xTaskGetSchedulerState>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <xQueueGenericSend+0x9e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <xQueueGenericSend+0xa2>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueGenericSend+0xa4>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	61fb      	str	r3, [r7, #28]
}
 800259e:	bf00      	nop
 80025a0:	e7fe      	b.n	80025a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025a2:	f001 fa87 	bl	8003ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <xQueueGenericSend+0xd4>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d129      	bne.n	800260c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025be:	f000 f96f 	bl	80028a0 <prvCopyDataToQueue>
 80025c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d010      	beq.n	80025ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	3324      	adds	r3, #36	; 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fe7f 	bl	80032d4 <xTaskRemoveFromEventList>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <xQueueGenericSend+0x1f8>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	e00a      	b.n	8002604 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <xQueueGenericSend+0x1f8>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002604:	f001 fa86 	bl	8003b14 <vPortExitCritical>
				return pdPASS;
 8002608:	2301      	movs	r3, #1
 800260a:	e063      	b.n	80026d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002612:	f001 fa7f 	bl	8003b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002616:	2300      	movs	r3, #0
 8002618:	e05c      	b.n	80026d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4618      	mov	r0, r3
 8002626:	f000 feb7 	bl	8003398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800262a:	2301      	movs	r3, #1
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800262e:	f001 fa71 	bl	8003b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002632:	f000 fc6d 	bl	8002f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002636:	f001 fa3d 	bl	8003ab4 <vPortEnterCritical>
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002640:	b25b      	sxtb	r3, r3
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d103      	bne.n	8002650 <xQueueGenericSend+0x16c>
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002656:	b25b      	sxtb	r3, r3
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d103      	bne.n	8002666 <xQueueGenericSend+0x182>
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002666:	f001 fa55 	bl	8003b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266a:	1d3a      	adds	r2, r7, #4
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fea6 	bl	80033c4 <xTaskCheckForTimeOut>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d124      	bne.n	80026c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800267e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002680:	f000 fa06 	bl	8002a90 <prvIsQueueFull>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d018      	beq.n	80026bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	3310      	adds	r3, #16
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fdfa 	bl	800328c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269a:	f000 f991 	bl	80029c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800269e:	f000 fc45 	bl	8002f2c <xTaskResumeAll>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f af7c 	bne.w	80025a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <xQueueGenericSend+0x1f8>)
 80026ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	e772      	b.n	80025a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026be:	f000 f97f 	bl	80029c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026c2:	f000 fc33 	bl	8002f2c <xTaskResumeAll>
 80026c6:	e76c      	b.n	80025a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ca:	f000 f979 	bl	80029c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ce:	f000 fc2d 	bl	8002f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	; 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <xQueueReceive+0x30>
	__asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	623b      	str	r3, [r7, #32]
}
 800270c:	bf00      	nop
 800270e:	e7fe      	b.n	800270e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <xQueueReceive+0x3e>
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <xQueueReceive+0x42>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueReceive+0x44>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueReceive+0x5e>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	61fb      	str	r3, [r7, #28]
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273e:	f000 ff85 	bl	800364c <xTaskGetSchedulerState>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <xQueueReceive+0x6e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueReceive+0x72>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueReceive+0x74>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <xQueueReceive+0x8e>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61bb      	str	r3, [r7, #24]
}
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800276e:	f001 f9a1 	bl	8003ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01f      	beq.n	80027be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002782:	f000 f8f7 	bl	8002974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	3310      	adds	r3, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fd9a 	bl	80032d4 <xTaskRemoveFromEventList>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <xQueueReceive+0x1bc>)
 80027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027b6:	f001 f9ad 	bl	8003b14 <vPortExitCritical>
				return pdPASS;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e069      	b.n	8002892 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027c4:	f001 f9a6 	bl	8003b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e062      	b.n	8002892 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fdde 	bl	8003398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027e0:	f001 f998 	bl	8003b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027e4:	f000 fb94 	bl	8002f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e8:	f001 f964 	bl	8003ab4 <vPortEnterCritical>
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <xQueueReceive+0x122>
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d103      	bne.n	8002818 <xQueueReceive+0x138>
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002818:	f001 f97c 	bl	8003b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800281c:	1d3a      	adds	r2, r7, #4
 800281e:	f107 0310 	add.w	r3, r7, #16
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fdcd 	bl	80033c4 <xTaskCheckForTimeOut>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d123      	bne.n	8002878 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f917 	bl	8002a64 <prvIsQueueEmpty>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d017      	beq.n	800286c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fd21 	bl	800328c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800284a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284c:	f000 f8b8 	bl	80029c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002850:	f000 fb6c 	bl	8002f2c <xTaskResumeAll>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d189      	bne.n	800276e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <xQueueReceive+0x1bc>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	e780      	b.n	800276e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800286c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286e:	f000 f8a7 	bl	80029c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002872:	f000 fb5b 	bl	8002f2c <xTaskResumeAll>
 8002876:	e77a      	b.n	800276e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287a:	f000 f8a1 	bl	80029c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800287e:	f000 fb55 	bl	8002f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002884:	f000 f8ee 	bl	8002a64 <prvIsQueueEmpty>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f43f af6f 	beq.w	800276e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002892:	4618      	mov	r0, r3
 8002894:	3730      	adds	r7, #48	; 0x30
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000ed04 	.word	0xe000ed04

080028a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d14d      	bne.n	8002962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fedc 	bl	8003688 <xTaskPriorityDisinherit>
 80028d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e043      	b.n	8002962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d119      	bne.n	8002914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6858      	ldr	r0, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	461a      	mov	r2, r3
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	f001 fc02 	bl	80040f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	441a      	add	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d32b      	bcc.n	8002962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	e026      	b.n	8002962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68d8      	ldr	r0, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	461a      	mov	r2, r3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	f001 fbe8 	bl	80040f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	425b      	negs	r3, r3
 800292e:	441a      	add	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	425b      	negs	r3, r3
 800294a:	441a      	add	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d105      	bne.n	8002962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3b01      	subs	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800296a:	697b      	ldr	r3, [r7, #20]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	441a      	add	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d303      	bcc.n	80029a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68d9      	ldr	r1, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	461a      	mov	r2, r3
 80029b2:	6838      	ldr	r0, [r7, #0]
 80029b4:	f001 fb9e 	bl	80040f4 <memcpy>
	}
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029c8:	f001 f874 	bl	8003ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029d4:	e011      	b.n	80029fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d012      	beq.n	8002a04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fc76 	bl	80032d4 <xTaskRemoveFromEventList>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029ee:	f000 fd4b 	bl	8003488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dce9      	bgt.n	80029d6 <prvUnlockQueue+0x16>
 8002a02:	e000      	b.n	8002a06 <prvUnlockQueue+0x46>
					break;
 8002a04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a0e:	f001 f881 	bl	8003b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a12:	f001 f84f 	bl	8003ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a1e:	e011      	b.n	8002a44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d012      	beq.n	8002a4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3310      	adds	r3, #16
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fc51 	bl	80032d4 <xTaskRemoveFromEventList>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a38:	f000 fd26 	bl	8003488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a3c:	7bbb      	ldrb	r3, [r7, #14]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	dce9      	bgt.n	8002a20 <prvUnlockQueue+0x60>
 8002a4c:	e000      	b.n	8002a50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a58:	f001 f85c 	bl	8003b14 <vPortExitCritical>
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a6c:	f001 f822 	bl	8003ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e001      	b.n	8002a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a82:	f001 f847 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a98:	f001 f80c 	bl	8003ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d102      	bne.n	8002aae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e001      	b.n	8002ab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ab2:	f001 f82f 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	623b      	str	r3, [r7, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xTaskCreateStatic+0x46>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	61fb      	str	r3, [r7, #28]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b06:	2354      	movs	r3, #84	; 0x54
 8002b08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b54      	cmp	r3, #84	; 0x54
 8002b0e:	d00a      	beq.n	8002b26 <xTaskCreateStatic+0x66>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
}
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01e      	beq.n	8002b6c <xTaskCreateStatic+0xac>
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b46:	2300      	movs	r3, #0
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f850 	bl	8002c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b66:	f000 f8d5 	bl	8002d14 <prvAddNewTaskToReadyList>
 8002b6a:	e001      	b.n	8002b70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b70:	697b      	ldr	r3, [r7, #20]
	}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08c      	sub	sp, #48	; 0x30
 8002b7e:	af04      	add	r7, sp, #16
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f872 	bl	8003c78 <pvPortMalloc>
 8002b94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b9c:	2054      	movs	r0, #84	; 0x54
 8002b9e:	f001 f86b 	bl	8003c78 <pvPortMalloc>
 8002ba2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb0:	e005      	b.n	8002bbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f001 f92c 	bl	8003e10 <vPortFree>
 8002bb8:	e001      	b.n	8002bbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9303      	str	r3, [sp, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	9302      	str	r3, [sp, #8]
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f80e 	bl	8002c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002be8:	69f8      	ldr	r0, [r7, #28]
 8002bea:	f000 f893 	bl	8002d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e002      	b.n	8002bfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
	}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	617b      	str	r3, [r7, #20]
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01f      	beq.n	8002c92 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e012      	b.n	8002c7e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	7819      	ldrb	r1, [r3, #0]
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	3334      	adds	r3, #52	; 0x34
 8002c68:	460a      	mov	r2, r1
 8002c6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d9e9      	bls.n	8002c58 <prvInitialiseNewTask+0x54>
 8002c84:	e000      	b.n	8002c88 <prvInitialiseNewTask+0x84>
			{
				break;
 8002c86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c90:	e003      	b.n	8002c9a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d901      	bls.n	8002ca4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	3304      	adds	r3, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fabb 	bl	8002236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fab6 	bl	8002236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	f1c3 0207 	rsb	r2, r3, #7
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	69b8      	ldr	r0, [r7, #24]
 8002cf4:	f000 fdb4 	bl	8003860 <pxPortInitialiseStack>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d1c:	f000 feca 	bl	8003ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <prvAddNewTaskToReadyList+0xb8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <prvAddNewTaskToReadyList+0xb8>)
 8002d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <prvAddNewTaskToReadyList+0xbc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <prvAddNewTaskToReadyList+0xbc>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <prvAddNewTaskToReadyList+0xb8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d110      	bne.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d40:	f000 fbc6 	bl	80034d0 <prvInitialiseTaskLists>
 8002d44:	e00d      	b.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <prvAddNewTaskToReadyList+0xc0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <prvAddNewTaskToReadyList+0xbc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d802      	bhi.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <prvAddNewTaskToReadyList+0xbc>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <prvAddNewTaskToReadyList+0xc4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <prvAddNewTaskToReadyList+0xc4>)
 8002d6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <prvAddNewTaskToReadyList+0xc8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <prvAddNewTaskToReadyList+0xc8>)
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <prvAddNewTaskToReadyList+0xcc>)
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7ff fa5b 	bl	8002250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d9a:	f000 febb 	bl	8003b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <prvAddNewTaskToReadyList+0xc0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <prvAddNewTaskToReadyList+0xbc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <prvAddNewTaskToReadyList+0xd0>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2000042c 	.word	0x2000042c
 8002dd0:	2000032c 	.word	0x2000032c
 8002dd4:	20000438 	.word	0x20000438
 8002dd8:	20000448 	.word	0x20000448
 8002ddc:	20000434 	.word	0x20000434
 8002de0:	20000330 	.word	0x20000330
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d017      	beq.n	8002e2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <vTaskDelay+0x60>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <vTaskDelay+0x30>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	60bb      	str	r3, [r7, #8]
}
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e18:	f000 f87a 	bl	8002f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fcb8 	bl	8003794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e24:	f000 f882 	bl	8002f2c <xTaskResumeAll>
 8002e28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <vTaskDelay+0x64>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000454 	.word	0x20000454
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e5e:	463a      	mov	r2, r7
 8002e60:	1d39      	adds	r1, r7, #4
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb90 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	9202      	str	r2, [sp, #8]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	491e      	ldr	r1, [pc, #120]	; (8002ef8 <vTaskStartScheduler+0xa8>)
 8002e80:	481e      	ldr	r0, [pc, #120]	; (8002efc <vTaskStartScheduler+0xac>)
 8002e82:	f7ff fe1d 	bl	8002ac0 <xTaskCreateStatic>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <vTaskStartScheduler+0xb0>)
 8002e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <vTaskStartScheduler+0xb0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e001      	b.n	8002e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d116      	bne.n	8002ed2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	613b      	str	r3, [r7, #16]
}
 8002eb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <vTaskStartScheduler+0xb4>)
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <vTaskStartScheduler+0xb8>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <vTaskStartScheduler+0xbc>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ecc:	f000 fd50 	bl	8003970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ed0:	e00e      	b.n	8002ef0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d10a      	bne.n	8002ef0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60fb      	str	r3, [r7, #12]
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <vTaskStartScheduler+0x9e>
}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	08004adc 	.word	0x08004adc
 8002efc:	080034a1 	.word	0x080034a1
 8002f00:	20000450 	.word	0x20000450
 8002f04:	2000044c 	.word	0x2000044c
 8002f08:	20000438 	.word	0x20000438
 8002f0c:	20000430 	.word	0x20000430

08002f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <vTaskSuspendAll+0x18>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <vTaskSuspendAll+0x18>)
 8002f1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000454 	.word	0x20000454

08002f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <xTaskResumeAll+0x114>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	603b      	str	r3, [r7, #0]
}
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f58:	f000 fdac 	bl	8003ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <xTaskResumeAll+0x114>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4a37      	ldr	r2, [pc, #220]	; (8003040 <xTaskResumeAll+0x114>)
 8002f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <xTaskResumeAll+0x114>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d161      	bne.n	8003032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <xTaskResumeAll+0x118>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d05d      	beq.n	8003032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f76:	e02e      	b.n	8002fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f78:	4b33      	ldr	r3, [pc, #204]	; (8003048 <xTaskResumeAll+0x11c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3318      	adds	r3, #24
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f9c0 	bl	800230a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f9bb 	bl	800230a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <xTaskResumeAll+0x120>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	; (800304c <xTaskResumeAll+0x120>)
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4a27      	ldr	r2, [pc, #156]	; (8003050 <xTaskResumeAll+0x124>)
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7ff f947 	bl	8002250 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <xTaskResumeAll+0x128>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <xTaskResumeAll+0x12c>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <xTaskResumeAll+0x11c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cc      	bne.n	8002f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002fe4:	f000 fb12 	bl	800360c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <xTaskResumeAll+0x130>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ff4:	f000 f836 	bl	8003064 <xTaskIncrementTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <xTaskResumeAll+0x12c>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f1      	bne.n	8002ff4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <xTaskResumeAll+0x130>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <xTaskResumeAll+0x12c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800301e:	2301      	movs	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <xTaskResumeAll+0x134>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003032:	f000 fd6f 	bl	8003b14 <vPortExitCritical>

	return xAlreadyYielded;
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000454 	.word	0x20000454
 8003044:	2000042c 	.word	0x2000042c
 8003048:	200003ec 	.word	0x200003ec
 800304c:	20000434 	.word	0x20000434
 8003050:	20000330 	.word	0x20000330
 8003054:	2000032c 	.word	0x2000032c
 8003058:	20000440 	.word	0x20000440
 800305c:	2000043c 	.word	0x2000043c
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <xTaskIncrementTick+0x144>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 808e 	bne.w	8003194 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <xTaskIncrementTick+0x148>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003080:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <xTaskIncrementTick+0x148>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d120      	bne.n	80030ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <xTaskIncrementTick+0x14c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	603b      	str	r3, [r7, #0]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xTaskIncrementTick+0x46>
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <xTaskIncrementTick+0x150>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3e      	ldr	r2, [pc, #248]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <xTaskIncrementTick+0x150>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <xTaskIncrementTick+0x154>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <xTaskIncrementTick+0x154>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	f000 fa9f 	bl	800360c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <xTaskIncrementTick+0x158>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d348      	bcc.n	800316a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <xTaskIncrementTick+0x158>)
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	601a      	str	r2, [r3, #0]
					break;
 80030ea:	e03e      	b.n	800316a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d203      	bcs.n	800310c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <xTaskIncrementTick+0x158>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800310a:	e02e      	b.n	800316a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f8fa 	bl	800230a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3318      	adds	r3, #24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f8f1 	bl	800230a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <xTaskIncrementTick+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <xTaskIncrementTick+0x15c>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <xTaskIncrementTick+0x160>)
 8003148:	441a      	add	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7ff f87d 	bl	8002250 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <xTaskIncrementTick+0x164>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d3b9      	bcc.n	80030d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003168:	e7b6      	b.n	80030d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <xTaskIncrementTick+0x164>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4914      	ldr	r1, [pc, #80]	; (80031c4 <xTaskIncrementTick+0x160>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d901      	bls.n	8003186 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <xTaskIncrementTick+0x168>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800318e:	2301      	movs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e004      	b.n	800319e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <xTaskIncrementTick+0x16c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <xTaskIncrementTick+0x16c>)
 800319c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800319e:	697b      	ldr	r3, [r7, #20]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000454 	.word	0x20000454
 80031ac:	20000430 	.word	0x20000430
 80031b0:	200003e4 	.word	0x200003e4
 80031b4:	200003e8 	.word	0x200003e8
 80031b8:	20000444 	.word	0x20000444
 80031bc:	2000044c 	.word	0x2000044c
 80031c0:	20000434 	.word	0x20000434
 80031c4:	20000330 	.word	0x20000330
 80031c8:	2000032c 	.word	0x2000032c
 80031cc:	20000440 	.word	0x20000440
 80031d0:	2000043c 	.word	0x2000043c

080031d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <vTaskSwitchContext+0xa4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <vTaskSwitchContext+0xa8>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031e8:	e03f      	b.n	800326a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <vTaskSwitchContext+0xa8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <vTaskSwitchContext+0xac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f1c3 031f 	rsb	r3, r3, #31
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	491f      	ldr	r1, [pc, #124]	; (8003284 <vTaskSwitchContext+0xb0>)
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <vTaskSwitchContext+0x5c>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	607b      	str	r3, [r7, #4]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vTaskSwitchContext+0x5a>
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <vTaskSwitchContext+0xb0>)
 800323c:	4413      	add	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3308      	adds	r3, #8
 8003252:	429a      	cmp	r2, r3
 8003254:	d104      	bne.n	8003260 <vTaskSwitchContext+0x8c>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a08      	ldr	r2, [pc, #32]	; (8003288 <vTaskSwitchContext+0xb4>)
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000454 	.word	0x20000454
 800327c:	20000440 	.word	0x20000440
 8003280:	20000434 	.word	0x20000434
 8003284:	20000330 	.word	0x20000330
 8003288:	2000032c 	.word	0x2000032c

0800328c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <vTaskPlaceOnEventList+0x44>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3318      	adds	r3, #24
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe ffec 	bl	8002298 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032c0:	2101      	movs	r1, #1
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	f000 fa66 	bl	8003794 <prvAddCurrentTaskToDelayedList>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000032c 	.word	0x2000032c

080032d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60fb      	str	r3, [r7, #12]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3318      	adds	r3, #24
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f800 	bl	800230a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <xTaskRemoveFromEventList+0xac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11c      	bne.n	800334c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fff7 	bl	800230a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <xTaskRemoveFromEventList+0xb0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	4a16      	ldr	r2, [pc, #88]	; (8003384 <xTaskRemoveFromEventList+0xb0>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <xTaskRemoveFromEventList+0xb4>)
 800333c:	441a      	add	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7fe ff83 	bl	8002250 <vListInsertEnd>
 800334a:	e005      	b.n	8003358 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3318      	adds	r3, #24
 8003350:	4619      	mov	r1, r3
 8003352:	480e      	ldr	r0, [pc, #56]	; (800338c <xTaskRemoveFromEventList+0xb8>)
 8003354:	f7fe ff7c 	bl	8002250 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <xTaskRemoveFromEventList+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	429a      	cmp	r2, r3
 8003364:	d905      	bls.n	8003372 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003366:	2301      	movs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <xTaskRemoveFromEventList+0xc0>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e001      	b.n	8003376 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003376:	697b      	ldr	r3, [r7, #20]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000454 	.word	0x20000454
 8003384:	20000434 	.word	0x20000434
 8003388:	20000330 	.word	0x20000330
 800338c:	200003ec 	.word	0x200003ec
 8003390:	2000032c 	.word	0x2000032c
 8003394:	20000440 	.word	0x20000440

08003398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <vTaskInternalSetTimeOutState+0x24>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <vTaskInternalSetTimeOutState+0x28>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	605a      	str	r2, [r3, #4]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000444 	.word	0x20000444
 80033c0:	20000430 	.word	0x20000430

080033c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	613b      	str	r3, [r7, #16]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003406:	f000 fb55 	bl	8003ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <xTaskCheckForTimeOut+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d102      	bne.n	800342a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e023      	b.n	8003472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <xTaskCheckForTimeOut+0xc0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d007      	beq.n	8003446 <xTaskCheckForTimeOut+0x82>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e015      	b.n	8003472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	429a      	cmp	r2, r3
 800344e:	d20b      	bcs.n	8003468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad2      	subs	r2, r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff9b 	bl	8003398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e004      	b.n	8003472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003472:	f000 fb4f 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 8003476:	69fb      	ldr	r3, [r7, #28]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000430 	.word	0x20000430
 8003484:	20000444 	.word	0x20000444

08003488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <vTaskMissedYield+0x14>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	20000440 	.word	0x20000440

080034a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034a8:	f000 f852 	bl	8003550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <prvIdleTask+0x28>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d9f9      	bls.n	80034a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <prvIdleTask+0x2c>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034c4:	e7f0      	b.n	80034a8 <prvIdleTask+0x8>
 80034c6:	bf00      	nop
 80034c8:	20000330 	.word	0x20000330
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	e00c      	b.n	80034f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <prvInitialiseTaskLists+0x60>)
 80034e8:	4413      	add	r3, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fe83 	bl	80021f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3301      	adds	r3, #1
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d9ef      	bls.n	80034dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <prvInitialiseTaskLists+0x64>)
 80034fe:	f7fe fe7a 	bl	80021f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003502:	480d      	ldr	r0, [pc, #52]	; (8003538 <prvInitialiseTaskLists+0x68>)
 8003504:	f7fe fe77 	bl	80021f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <prvInitialiseTaskLists+0x6c>)
 800350a:	f7fe fe74 	bl	80021f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800350e:	480c      	ldr	r0, [pc, #48]	; (8003540 <prvInitialiseTaskLists+0x70>)
 8003510:	f7fe fe71 	bl	80021f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <prvInitialiseTaskLists+0x74>)
 8003516:	f7fe fe6e 	bl	80021f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <prvInitialiseTaskLists+0x78>)
 800351c:	4a05      	ldr	r2, [pc, #20]	; (8003534 <prvInitialiseTaskLists+0x64>)
 800351e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvInitialiseTaskLists+0x7c>)
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <prvInitialiseTaskLists+0x68>)
 8003524:	601a      	str	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000330 	.word	0x20000330
 8003534:	200003bc 	.word	0x200003bc
 8003538:	200003d0 	.word	0x200003d0
 800353c:	200003ec 	.word	0x200003ec
 8003540:	20000400 	.word	0x20000400
 8003544:	20000418 	.word	0x20000418
 8003548:	200003e4 	.word	0x200003e4
 800354c:	200003e8 	.word	0x200003e8

08003550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003556:	e019      	b.n	800358c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003558:	f000 faac 	bl	8003ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <prvCheckTasksWaitingTermination+0x50>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fece 	bl	800230a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <prvCheckTasksWaitingTermination+0x54>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <prvCheckTasksWaitingTermination+0x54>)
 8003576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <prvCheckTasksWaitingTermination+0x58>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <prvCheckTasksWaitingTermination+0x58>)
 8003580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003582:	f000 fac7 	bl	8003b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f810 	bl	80035ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <prvCheckTasksWaitingTermination+0x58>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e1      	bne.n	8003558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000400 	.word	0x20000400
 80035a4:	2000042c 	.word	0x2000042c
 80035a8:	20000414 	.word	0x20000414

080035ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fc24 	bl	8003e10 <vPortFree>
				vPortFree( pxTCB );
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fc21 	bl	8003e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035ce:	e018      	b.n	8003602 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d103      	bne.n	80035e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fc18 	bl	8003e10 <vPortFree>
	}
 80035e0:	e00f      	b.n	8003602 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d00a      	beq.n	8003602 <prvDeleteTCB+0x56>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	60fb      	str	r3, [r7, #12]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <prvDeleteTCB+0x54>
	}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <prvResetNextTaskUnblockTime+0x38>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <prvResetNextTaskUnblockTime+0x3c>)
 800361e:	f04f 32ff 	mov.w	r2, #4294967295
 8003622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003624:	e008      	b.n	8003638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <prvResetNextTaskUnblockTime+0x38>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <prvResetNextTaskUnblockTime+0x3c>)
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200003e4 	.word	0x200003e4
 8003648:	2000044c 	.word	0x2000044c

0800364c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <xTaskGetSchedulerState+0x34>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800365a:	2301      	movs	r3, #1
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e008      	b.n	8003672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <xTaskGetSchedulerState+0x38>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003668:	2302      	movs	r3, #2
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e001      	b.n	8003672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003672:	687b      	ldr	r3, [r7, #4]
	}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000438 	.word	0x20000438
 8003684:	20000454 	.word	0x20000454

08003688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06e      	beq.n	800377c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <xTaskPriorityDisinherit+0x100>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d00a      	beq.n	80036be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60fb      	str	r3, [r7, #12]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60bb      	str	r3, [r7, #8]
}
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	1e5a      	subs	r2, r3, #1
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d044      	beq.n	800377c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d140      	bne.n	800377c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fe03 	bl	800230a <uxListRemove>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d115      	bne.n	8003736 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	491f      	ldr	r1, [pc, #124]	; (800378c <xTaskPriorityDisinherit+0x104>)
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xTaskPriorityDisinherit+0xae>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2201      	movs	r2, #1
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <xTaskPriorityDisinherit+0x108>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4013      	ands	r3, r2
 8003732:	4a17      	ldr	r2, [pc, #92]	; (8003790 <xTaskPriorityDisinherit+0x108>)
 8003734:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f1c3 0207 	rsb	r2, r3, #7
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <xTaskPriorityDisinherit+0x108>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <xTaskPriorityDisinherit+0x108>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <xTaskPriorityDisinherit+0x104>)
 800376a:	441a      	add	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fd6c 	bl	8002250 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800377c:	697b      	ldr	r3, [r7, #20]
	}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000032c 	.word	0x2000032c
 800378c:	20000330 	.word	0x20000330
 8003790:	20000434 	.word	0x20000434

08003794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037a4:	4b28      	ldr	r3, [pc, #160]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3304      	adds	r3, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fdad 	bl	800230a <uxListRemove>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2201      	movs	r2, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4013      	ands	r3, r2
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d10a      	bne.n	80037ec <prvAddCurrentTaskToDelayedList+0x58>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	481a      	ldr	r0, [pc, #104]	; (8003850 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037e6:	f7fe fd33 	bl	8002250 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037ea:	e026      	b.n	800383a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d209      	bcs.n	8003818 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fd41 	bl	8002298 <vListInsert>
}
 8003816:	e010      	b.n	800383a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <prvAddCurrentTaskToDelayedList+0xc4>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe fd37 	bl	8002298 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <prvAddCurrentTaskToDelayedList+0xc8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d202      	bcs.n	800383a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003834:	4a09      	ldr	r2, [pc, #36]	; (800385c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6013      	str	r3, [r2, #0]
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000430 	.word	0x20000430
 8003848:	2000032c 	.word	0x2000032c
 800384c:	20000434 	.word	0x20000434
 8003850:	20000418 	.word	0x20000418
 8003854:	200003e8 	.word	0x200003e8
 8003858:	200003e4 	.word	0x200003e4
 800385c:	2000044c 	.word	0x2000044c

08003860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b04      	subs	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b04      	subs	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b04      	subs	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003890:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <pxPortInitialiseStack+0x64>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b14      	subs	r3, #20
 800389a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b04      	subs	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f06f 0202 	mvn.w	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b20      	subs	r3, #32
 80038b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	080038c9 	.word	0x080038c9

080038c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <prvTaskExitError+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d00a      	beq.n	80038f2 <prvTaskExitError+0x2a>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <prvTaskExitError+0x28>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60bb      	str	r3, [r7, #8]
}
 8003904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003906:	bf00      	nop
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0fc      	beq.n	8003908 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	2000000c 	.word	0x2000000c

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	2000032c 	.word	0x2000032c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003948:	4808      	ldr	r0, [pc, #32]	; (800396c <prvPortStartFirstTask+0x24>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8814 	msr	CONTROL, r0
 800395a:	b662      	cpsie	i
 800395c:	b661      	cpsie	f
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	df00      	svc	0
 8003968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800396a:	bf00      	nop
 800396c:	e000ed08 	.word	0xe000ed08

08003970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <xPortStartScheduler+0x120>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <xPortStartScheduler+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10a      	bne.n	8003996 <xPortStartScheduler+0x26>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <xPortStartScheduler+0x120>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <xPortStartScheduler+0x128>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10a      	bne.n	80039b6 <xPortStartScheduler+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <xPortStartScheduler+0x12c>)
 80039b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <xPortStartScheduler+0x130>)
 80039dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e4:	e009      	b.n	80039fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d0ef      	beq.n	80039e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00a      	beq.n	8003a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60bb      	str	r3, [r7, #8]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a5e:	f000 f8dd 	bl	8003c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <xPortStartScheduler+0x13c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a68:	f000 f8fc 	bl	8003c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a78:	f7ff ff66 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a7c:	f7ff fbaa 	bl	80031d4 <vTaskSwitchContext>
	prvTaskExitError();
 8003a80:	f7ff ff22 	bl	80038c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000ed00 	.word	0xe000ed00
 8003a94:	410fc271 	.word	0x410fc271
 8003a98:	410fc270 	.word	0x410fc270
 8003a9c:	e000e400 	.word	0xe000e400
 8003aa0:	20000458 	.word	0x20000458
 8003aa4:	2000045c 	.word	0x2000045c
 8003aa8:	e000ed20 	.word	0xe000ed20
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	e000ef34 	.word	0xe000ef34

08003ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10f      	bne.n	8003b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <vPortEnterCritical+0x5c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vPortEnterCritical+0x4a>
	}
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <vPortExitCritical+0x50>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <vPortExitCritical+0x24>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	607b      	str	r3, [r7, #4]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vPortExitCritical+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <vPortExitCritical+0x50>)
 8003b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <vPortExitCritical+0x50>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <vPortExitCritical+0x42>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
	...

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff fb18 	bl	80031d4 <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	2000032c 	.word	0x2000032c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7ff fa37 	bl	8003064 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <xPortSysTickHandler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
}
 8003c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <vPortSetupTimerInterrupt+0x44>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010
 8003c54:	e000e018 	.word	0xe000e018
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	10624dd3 	.word	0x10624dd3
 8003c60:	e000e014 	.word	0xe000e014

08003c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c74 <vPortEnableVFP+0x10>
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c6e:	6001      	str	r1, [r0, #0]
 8003c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c72:	bf00      	nop
 8003c74:	e000ed88 	.word	0xe000ed88

08003c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c84:	f7ff f944 	bl	8002f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c88:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <pvPortMalloc+0x180>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c90:	f000 f920 	bl	8003ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c94:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <pvPortMalloc+0x184>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8093 	bne.w	8003dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01d      	beq.n	8003ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ca8:	2208      	movs	r2, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d014      	beq.n	8003ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f023 0307 	bic.w	r3, r3, #7
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	617b      	str	r3, [r7, #20]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d06e      	beq.n	8003dc8 <pvPortMalloc+0x150>
 8003cea:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <pvPortMalloc+0x188>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d869      	bhi.n	8003dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cf4:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <pvPortMalloc+0x18c>)
 8003cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cf8:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <pvPortMalloc+0x18c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cfe:	e004      	b.n	8003d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d903      	bls.n	8003d1c <pvPortMalloc+0xa4>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f1      	bne.n	8003d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <pvPortMalloc+0x180>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d050      	beq.n	8003dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	2308      	movs	r3, #8
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d91f      	bls.n	8003d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <pvPortMalloc+0xf8>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	613b      	str	r3, [r7, #16]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	f000 f908 	bl	8003f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <pvPortMalloc+0x188>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <pvPortMalloc+0x188>)
 8003d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <pvPortMalloc+0x188>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <pvPortMalloc+0x190>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d203      	bcs.n	8003daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <pvPortMalloc+0x188>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <pvPortMalloc+0x190>)
 8003da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <pvPortMalloc+0x184>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <pvPortMalloc+0x194>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <pvPortMalloc+0x194>)
 8003dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003dc8:	f7ff f8b0 	bl	8002f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <pvPortMalloc+0x174>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60fb      	str	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <pvPortMalloc+0x172>
	return pvReturn;
 8003dec:	69fb      	ldr	r3, [r7, #28]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3728      	adds	r7, #40	; 0x28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20004068 	.word	0x20004068
 8003dfc:	2000407c 	.word	0x2000407c
 8003e00:	2000406c 	.word	0x2000406c
 8003e04:	20004060 	.word	0x20004060
 8003e08:	20004070 	.word	0x20004070
 8003e0c:	20004074 	.word	0x20004074

08003e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04d      	beq.n	8003ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e22:	2308      	movs	r3, #8
 8003e24:	425b      	negs	r3, r3
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <vPortFree+0xb8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <vPortFree+0x44>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	60fb      	str	r3, [r7, #12]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <vPortFree+0x62>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60bb      	str	r3, [r7, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <vPortFree+0xb8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01e      	beq.n	8003ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11a      	bne.n	8003ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <vPortFree+0xb8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e98:	f7ff f83a 	bl	8002f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <vPortFree+0xbc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <vPortFree+0xbc>)
 8003ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eaa:	6938      	ldr	r0, [r7, #16]
 8003eac:	f000 f874 	bl	8003f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <vPortFree+0xc0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <vPortFree+0xc0>)
 8003eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eba:	f7ff f837 	bl	8002f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000407c 	.word	0x2000407c
 8003ecc:	2000406c 	.word	0x2000406c
 8003ed0:	20004078 	.word	0x20004078

08003ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <prvHeapInit+0xac>)
 8003ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <prvHeapInit+0xac>)
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <prvHeapInit+0xb0>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <prvHeapInit+0xb0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f20:	2208      	movs	r2, #8
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <prvHeapInit+0xb4>)
 8003f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <prvHeapInit+0xb4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <prvHeapInit+0xb4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <prvHeapInit+0xb4>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <prvHeapInit+0xb8>)
 8003f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <prvHeapInit+0xbc>)
 8003f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <prvHeapInit+0xc0>)
 8003f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000460 	.word	0x20000460
 8003f84:	20004060 	.word	0x20004060
 8003f88:	20004068 	.word	0x20004068
 8003f8c:	20004070 	.word	0x20004070
 8003f90:	2000406c 	.word	0x2000406c
 8003f94:	2000407c 	.word	0x2000407c

08003f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <prvInsertBlockIntoFreeList+0xac>)
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e002      	b.n	8003fac <prvInsertBlockIntoFreeList+0x14>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d8f7      	bhi.n	8003fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d108      	bne.n	8003fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d118      	bne.n	8004020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <prvInsertBlockIntoFreeList+0xb0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d00d      	beq.n	8004016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e008      	b.n	8004028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <prvInsertBlockIntoFreeList+0xb0>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e003      	b.n	8004028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d002      	beq.n	8004036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20004060 	.word	0x20004060
 8004048:	20004068 	.word	0x20004068

0800404c <siprintf>:
 800404c:	b40e      	push	{r1, r2, r3}
 800404e:	b500      	push	{lr}
 8004050:	b09c      	sub	sp, #112	; 0x70
 8004052:	ab1d      	add	r3, sp, #116	; 0x74
 8004054:	9002      	str	r0, [sp, #8]
 8004056:	9006      	str	r0, [sp, #24]
 8004058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800405c:	4809      	ldr	r0, [pc, #36]	; (8004084 <siprintf+0x38>)
 800405e:	9107      	str	r1, [sp, #28]
 8004060:	9104      	str	r1, [sp, #16]
 8004062:	4909      	ldr	r1, [pc, #36]	; (8004088 <siprintf+0x3c>)
 8004064:	f853 2b04 	ldr.w	r2, [r3], #4
 8004068:	9105      	str	r1, [sp, #20]
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	a902      	add	r1, sp, #8
 8004070:	f000 f9a0 	bl	80043b4 <_svfiprintf_r>
 8004074:	9b02      	ldr	r3, [sp, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	b01c      	add	sp, #112	; 0x70
 800407c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004080:	b003      	add	sp, #12
 8004082:	4770      	bx	lr
 8004084:	2000005c 	.word	0x2000005c
 8004088:	ffff0208 	.word	0xffff0208

0800408c <memset>:
 800408c:	4402      	add	r2, r0
 800408e:	4603      	mov	r3, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <__errno>:
 800409c:	4b01      	ldr	r3, [pc, #4]	; (80040a4 <__errno+0x8>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000005c 	.word	0x2000005c

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4d0d      	ldr	r5, [pc, #52]	; (80040e0 <__libc_init_array+0x38>)
 80040ac:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040ae:	1b64      	subs	r4, r4, r5
 80040b0:	10a4      	asrs	r4, r4, #2
 80040b2:	2600      	movs	r6, #0
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	4d0b      	ldr	r5, [pc, #44]	; (80040e8 <__libc_init_array+0x40>)
 80040ba:	4c0c      	ldr	r4, [pc, #48]	; (80040ec <__libc_init_array+0x44>)
 80040bc:	f000 fc6a 	bl	8004994 <_init>
 80040c0:	1b64      	subs	r4, r4, r5
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	2600      	movs	r6, #0
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08004b38 	.word	0x08004b38
 80040e4:	08004b38 	.word	0x08004b38
 80040e8:	08004b38 	.word	0x08004b38
 80040ec:	08004b3c 	.word	0x08004b3c

080040f0 <__retarget_lock_acquire_recursive>:
 80040f0:	4770      	bx	lr

080040f2 <__retarget_lock_release_recursive>:
 80040f2:	4770      	bx	lr

080040f4 <memcpy>:
 80040f4:	440a      	add	r2, r1
 80040f6:	4291      	cmp	r1, r2
 80040f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040fc:	d100      	bne.n	8004100 <memcpy+0xc>
 80040fe:	4770      	bx	lr
 8004100:	b510      	push	{r4, lr}
 8004102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410a:	4291      	cmp	r1, r2
 800410c:	d1f9      	bne.n	8004102 <memcpy+0xe>
 800410e:	bd10      	pop	{r4, pc}

08004110 <_free_r>:
 8004110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004112:	2900      	cmp	r1, #0
 8004114:	d044      	beq.n	80041a0 <_free_r+0x90>
 8004116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411a:	9001      	str	r0, [sp, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f1a1 0404 	sub.w	r4, r1, #4
 8004122:	bfb8      	it	lt
 8004124:	18e4      	addlt	r4, r4, r3
 8004126:	f000 f8df 	bl	80042e8 <__malloc_lock>
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <_free_r+0x94>)
 800412c:	9801      	ldr	r0, [sp, #4]
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x30>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	b003      	add	sp, #12
 8004138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800413c:	f000 b8da 	b.w	80042f4 <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x46>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1949      	addeq	r1, r1, r5
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x22>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x50>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x46>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1855      	adds	r5, r2, r1
 8004164:	42a5      	cmp	r5, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x70>
 8004168:	6824      	ldr	r4, [r4, #0]
 800416a:	4421      	add	r1, r4
 800416c:	1854      	adds	r4, r2, r1
 800416e:	42a3      	cmp	r3, r4
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x26>
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	440c      	add	r4, r1
 800417c:	6014      	str	r4, [r2, #0]
 800417e:	e7da      	b.n	8004136 <_free_r+0x26>
 8004180:	d902      	bls.n	8004188 <_free_r+0x78>
 8004182:	230c      	movs	r3, #12
 8004184:	6003      	str	r3, [r0, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x26>
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	1961      	adds	r1, r4, r5
 800418c:	428b      	cmp	r3, r1
 800418e:	bf04      	itt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	bf04      	itt	eq
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6054      	str	r4, [r2, #4]
 800419e:	e7ca      	b.n	8004136 <_free_r+0x26>
 80041a0:	b003      	add	sp, #12
 80041a2:	bd30      	pop	{r4, r5, pc}
 80041a4:	200041c0 	.word	0x200041c0

080041a8 <sbrk_aligned>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4e0e      	ldr	r6, [pc, #56]	; (80041e4 <sbrk_aligned+0x3c>)
 80041ac:	460c      	mov	r4, r1
 80041ae:	6831      	ldr	r1, [r6, #0]
 80041b0:	4605      	mov	r5, r0
 80041b2:	b911      	cbnz	r1, 80041ba <sbrk_aligned+0x12>
 80041b4:	f000 fba6 	bl	8004904 <_sbrk_r>
 80041b8:	6030      	str	r0, [r6, #0]
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 fba1 	bl	8004904 <_sbrk_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d00a      	beq.n	80041dc <sbrk_aligned+0x34>
 80041c6:	1cc4      	adds	r4, r0, #3
 80041c8:	f024 0403 	bic.w	r4, r4, #3
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d007      	beq.n	80041e0 <sbrk_aligned+0x38>
 80041d0:	1a21      	subs	r1, r4, r0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 fb96 	bl	8004904 <_sbrk_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d101      	bne.n	80041e0 <sbrk_aligned+0x38>
 80041dc:	f04f 34ff 	mov.w	r4, #4294967295
 80041e0:	4620      	mov	r0, r4
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	200041c4 	.word	0x200041c4

080041e8 <_malloc_r>:
 80041e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ec:	1ccd      	adds	r5, r1, #3
 80041ee:	f025 0503 	bic.w	r5, r5, #3
 80041f2:	3508      	adds	r5, #8
 80041f4:	2d0c      	cmp	r5, #12
 80041f6:	bf38      	it	cc
 80041f8:	250c      	movcc	r5, #12
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	4607      	mov	r7, r0
 80041fe:	db01      	blt.n	8004204 <_malloc_r+0x1c>
 8004200:	42a9      	cmp	r1, r5
 8004202:	d905      	bls.n	8004210 <_malloc_r+0x28>
 8004204:	230c      	movs	r3, #12
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	2600      	movs	r6, #0
 800420a:	4630      	mov	r0, r6
 800420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004210:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042e4 <_malloc_r+0xfc>
 8004214:	f000 f868 	bl	80042e8 <__malloc_lock>
 8004218:	f8d8 3000 	ldr.w	r3, [r8]
 800421c:	461c      	mov	r4, r3
 800421e:	bb5c      	cbnz	r4, 8004278 <_malloc_r+0x90>
 8004220:	4629      	mov	r1, r5
 8004222:	4638      	mov	r0, r7
 8004224:	f7ff ffc0 	bl	80041a8 <sbrk_aligned>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	4604      	mov	r4, r0
 800422c:	d155      	bne.n	80042da <_malloc_r+0xf2>
 800422e:	f8d8 4000 	ldr.w	r4, [r8]
 8004232:	4626      	mov	r6, r4
 8004234:	2e00      	cmp	r6, #0
 8004236:	d145      	bne.n	80042c4 <_malloc_r+0xdc>
 8004238:	2c00      	cmp	r4, #0
 800423a:	d048      	beq.n	80042ce <_malloc_r+0xe6>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	4631      	mov	r1, r6
 8004240:	4638      	mov	r0, r7
 8004242:	eb04 0903 	add.w	r9, r4, r3
 8004246:	f000 fb5d 	bl	8004904 <_sbrk_r>
 800424a:	4581      	cmp	r9, r0
 800424c:	d13f      	bne.n	80042ce <_malloc_r+0xe6>
 800424e:	6821      	ldr	r1, [r4, #0]
 8004250:	1a6d      	subs	r5, r5, r1
 8004252:	4629      	mov	r1, r5
 8004254:	4638      	mov	r0, r7
 8004256:	f7ff ffa7 	bl	80041a8 <sbrk_aligned>
 800425a:	3001      	adds	r0, #1
 800425c:	d037      	beq.n	80042ce <_malloc_r+0xe6>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	442b      	add	r3, r5
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	f8d8 3000 	ldr.w	r3, [r8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d038      	beq.n	80042de <_malloc_r+0xf6>
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	42a2      	cmp	r2, r4
 8004270:	d12b      	bne.n	80042ca <_malloc_r+0xe2>
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	e00f      	b.n	8004298 <_malloc_r+0xb0>
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	1b52      	subs	r2, r2, r5
 800427c:	d41f      	bmi.n	80042be <_malloc_r+0xd6>
 800427e:	2a0b      	cmp	r2, #11
 8004280:	d917      	bls.n	80042b2 <_malloc_r+0xca>
 8004282:	1961      	adds	r1, r4, r5
 8004284:	42a3      	cmp	r3, r4
 8004286:	6025      	str	r5, [r4, #0]
 8004288:	bf18      	it	ne
 800428a:	6059      	strne	r1, [r3, #4]
 800428c:	6863      	ldr	r3, [r4, #4]
 800428e:	bf08      	it	eq
 8004290:	f8c8 1000 	streq.w	r1, [r8]
 8004294:	5162      	str	r2, [r4, r5]
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	4638      	mov	r0, r7
 800429a:	f104 060b 	add.w	r6, r4, #11
 800429e:	f000 f829 	bl	80042f4 <__malloc_unlock>
 80042a2:	f026 0607 	bic.w	r6, r6, #7
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	1af2      	subs	r2, r6, r3
 80042aa:	d0ae      	beq.n	800420a <_malloc_r+0x22>
 80042ac:	1b9b      	subs	r3, r3, r6
 80042ae:	50a3      	str	r3, [r4, r2]
 80042b0:	e7ab      	b.n	800420a <_malloc_r+0x22>
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	6862      	ldr	r2, [r4, #4]
 80042b6:	d1dd      	bne.n	8004274 <_malloc_r+0x8c>
 80042b8:	f8c8 2000 	str.w	r2, [r8]
 80042bc:	e7ec      	b.n	8004298 <_malloc_r+0xb0>
 80042be:	4623      	mov	r3, r4
 80042c0:	6864      	ldr	r4, [r4, #4]
 80042c2:	e7ac      	b.n	800421e <_malloc_r+0x36>
 80042c4:	4634      	mov	r4, r6
 80042c6:	6876      	ldr	r6, [r6, #4]
 80042c8:	e7b4      	b.n	8004234 <_malloc_r+0x4c>
 80042ca:	4613      	mov	r3, r2
 80042cc:	e7cc      	b.n	8004268 <_malloc_r+0x80>
 80042ce:	230c      	movs	r3, #12
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4638      	mov	r0, r7
 80042d4:	f000 f80e 	bl	80042f4 <__malloc_unlock>
 80042d8:	e797      	b.n	800420a <_malloc_r+0x22>
 80042da:	6025      	str	r5, [r4, #0]
 80042dc:	e7dc      	b.n	8004298 <_malloc_r+0xb0>
 80042de:	605b      	str	r3, [r3, #4]
 80042e0:	deff      	udf	#255	; 0xff
 80042e2:	bf00      	nop
 80042e4:	200041c0 	.word	0x200041c0

080042e8 <__malloc_lock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_lock+0x8>)
 80042ea:	f7ff bf01 	b.w	80040f0 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	200041bc 	.word	0x200041bc

080042f4 <__malloc_unlock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__malloc_unlock+0x8>)
 80042f6:	f7ff befc 	b.w	80040f2 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	200041bc 	.word	0x200041bc

08004300 <__ssputs_r>:
 8004300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	688e      	ldr	r6, [r1, #8]
 8004306:	461f      	mov	r7, r3
 8004308:	42be      	cmp	r6, r7
 800430a:	680b      	ldr	r3, [r1, #0]
 800430c:	4682      	mov	sl, r0
 800430e:	460c      	mov	r4, r1
 8004310:	4690      	mov	r8, r2
 8004312:	d82c      	bhi.n	800436e <__ssputs_r+0x6e>
 8004314:	898a      	ldrh	r2, [r1, #12]
 8004316:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800431a:	d026      	beq.n	800436a <__ssputs_r+0x6a>
 800431c:	6965      	ldr	r5, [r4, #20]
 800431e:	6909      	ldr	r1, [r1, #16]
 8004320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004324:	eba3 0901 	sub.w	r9, r3, r1
 8004328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800432c:	1c7b      	adds	r3, r7, #1
 800432e:	444b      	add	r3, r9
 8004330:	106d      	asrs	r5, r5, #1
 8004332:	429d      	cmp	r5, r3
 8004334:	bf38      	it	cc
 8004336:	461d      	movcc	r5, r3
 8004338:	0553      	lsls	r3, r2, #21
 800433a:	d527      	bpl.n	800438c <__ssputs_r+0x8c>
 800433c:	4629      	mov	r1, r5
 800433e:	f7ff ff53 	bl	80041e8 <_malloc_r>
 8004342:	4606      	mov	r6, r0
 8004344:	b360      	cbz	r0, 80043a0 <__ssputs_r+0xa0>
 8004346:	6921      	ldr	r1, [r4, #16]
 8004348:	464a      	mov	r2, r9
 800434a:	f7ff fed3 	bl	80040f4 <memcpy>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	6126      	str	r6, [r4, #16]
 800435c:	6165      	str	r5, [r4, #20]
 800435e:	444e      	add	r6, r9
 8004360:	eba5 0509 	sub.w	r5, r5, r9
 8004364:	6026      	str	r6, [r4, #0]
 8004366:	60a5      	str	r5, [r4, #8]
 8004368:	463e      	mov	r6, r7
 800436a:	42be      	cmp	r6, r7
 800436c:	d900      	bls.n	8004370 <__ssputs_r+0x70>
 800436e:	463e      	mov	r6, r7
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	4632      	mov	r2, r6
 8004374:	4641      	mov	r1, r8
 8004376:	f000 faab 	bl	80048d0 <memmove>
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	1b9b      	subs	r3, r3, r6
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	4433      	add	r3, r6
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2000      	movs	r0, #0
 8004388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800438c:	462a      	mov	r2, r5
 800438e:	f000 fac9 	bl	8004924 <_realloc_r>
 8004392:	4606      	mov	r6, r0
 8004394:	2800      	cmp	r0, #0
 8004396:	d1e0      	bne.n	800435a <__ssputs_r+0x5a>
 8004398:	6921      	ldr	r1, [r4, #16]
 800439a:	4650      	mov	r0, sl
 800439c:	f7ff feb8 	bl	8004110 <_free_r>
 80043a0:	230c      	movs	r3, #12
 80043a2:	f8ca 3000 	str.w	r3, [sl]
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	e7e9      	b.n	8004388 <__ssputs_r+0x88>

080043b4 <_svfiprintf_r>:
 80043b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	4698      	mov	r8, r3
 80043ba:	898b      	ldrh	r3, [r1, #12]
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	b09d      	sub	sp, #116	; 0x74
 80043c0:	4607      	mov	r7, r0
 80043c2:	460d      	mov	r5, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	d50e      	bpl.n	80043e6 <_svfiprintf_r+0x32>
 80043c8:	690b      	ldr	r3, [r1, #16]
 80043ca:	b963      	cbnz	r3, 80043e6 <_svfiprintf_r+0x32>
 80043cc:	2140      	movs	r1, #64	; 0x40
 80043ce:	f7ff ff0b 	bl	80041e8 <_malloc_r>
 80043d2:	6028      	str	r0, [r5, #0]
 80043d4:	6128      	str	r0, [r5, #16]
 80043d6:	b920      	cbnz	r0, 80043e2 <_svfiprintf_r+0x2e>
 80043d8:	230c      	movs	r3, #12
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	e0d0      	b.n	8004584 <_svfiprintf_r+0x1d0>
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	616b      	str	r3, [r5, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	2320      	movs	r3, #32
 80043ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043f4:	2330      	movs	r3, #48	; 0x30
 80043f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800459c <_svfiprintf_r+0x1e8>
 80043fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043fe:	f04f 0901 	mov.w	r9, #1
 8004402:	4623      	mov	r3, r4
 8004404:	469a      	mov	sl, r3
 8004406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800440a:	b10a      	cbz	r2, 8004410 <_svfiprintf_r+0x5c>
 800440c:	2a25      	cmp	r2, #37	; 0x25
 800440e:	d1f9      	bne.n	8004404 <_svfiprintf_r+0x50>
 8004410:	ebba 0b04 	subs.w	fp, sl, r4
 8004414:	d00b      	beq.n	800442e <_svfiprintf_r+0x7a>
 8004416:	465b      	mov	r3, fp
 8004418:	4622      	mov	r2, r4
 800441a:	4629      	mov	r1, r5
 800441c:	4638      	mov	r0, r7
 800441e:	f7ff ff6f 	bl	8004300 <__ssputs_r>
 8004422:	3001      	adds	r0, #1
 8004424:	f000 80a9 	beq.w	800457a <_svfiprintf_r+0x1c6>
 8004428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800442a:	445a      	add	r2, fp
 800442c:	9209      	str	r2, [sp, #36]	; 0x24
 800442e:	f89a 3000 	ldrb.w	r3, [sl]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a1 	beq.w	800457a <_svfiprintf_r+0x1c6>
 8004438:	2300      	movs	r3, #0
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004442:	f10a 0a01 	add.w	sl, sl, #1
 8004446:	9304      	str	r3, [sp, #16]
 8004448:	9307      	str	r3, [sp, #28]
 800444a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800444e:	931a      	str	r3, [sp, #104]	; 0x68
 8004450:	4654      	mov	r4, sl
 8004452:	2205      	movs	r2, #5
 8004454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004458:	4850      	ldr	r0, [pc, #320]	; (800459c <_svfiprintf_r+0x1e8>)
 800445a:	f7fb fec9 	bl	80001f0 <memchr>
 800445e:	9a04      	ldr	r2, [sp, #16]
 8004460:	b9d8      	cbnz	r0, 800449a <_svfiprintf_r+0xe6>
 8004462:	06d0      	lsls	r0, r2, #27
 8004464:	bf44      	itt	mi
 8004466:	2320      	movmi	r3, #32
 8004468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446c:	0711      	lsls	r1, r2, #28
 800446e:	bf44      	itt	mi
 8004470:	232b      	movmi	r3, #43	; 0x2b
 8004472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004476:	f89a 3000 	ldrb.w	r3, [sl]
 800447a:	2b2a      	cmp	r3, #42	; 0x2a
 800447c:	d015      	beq.n	80044aa <_svfiprintf_r+0xf6>
 800447e:	9a07      	ldr	r2, [sp, #28]
 8004480:	4654      	mov	r4, sl
 8004482:	2000      	movs	r0, #0
 8004484:	f04f 0c0a 	mov.w	ip, #10
 8004488:	4621      	mov	r1, r4
 800448a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448e:	3b30      	subs	r3, #48	; 0x30
 8004490:	2b09      	cmp	r3, #9
 8004492:	d94d      	bls.n	8004530 <_svfiprintf_r+0x17c>
 8004494:	b1b0      	cbz	r0, 80044c4 <_svfiprintf_r+0x110>
 8004496:	9207      	str	r2, [sp, #28]
 8004498:	e014      	b.n	80044c4 <_svfiprintf_r+0x110>
 800449a:	eba0 0308 	sub.w	r3, r0, r8
 800449e:	fa09 f303 	lsl.w	r3, r9, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	46a2      	mov	sl, r4
 80044a8:	e7d2      	b.n	8004450 <_svfiprintf_r+0x9c>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	1d19      	adds	r1, r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9103      	str	r1, [sp, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbb      	ittet	lt
 80044b6:	425b      	neglt	r3, r3
 80044b8:	f042 0202 	orrlt.w	r2, r2, #2
 80044bc:	9307      	strge	r3, [sp, #28]
 80044be:	9307      	strlt	r3, [sp, #28]
 80044c0:	bfb8      	it	lt
 80044c2:	9204      	strlt	r2, [sp, #16]
 80044c4:	7823      	ldrb	r3, [r4, #0]
 80044c6:	2b2e      	cmp	r3, #46	; 0x2e
 80044c8:	d10c      	bne.n	80044e4 <_svfiprintf_r+0x130>
 80044ca:	7863      	ldrb	r3, [r4, #1]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d134      	bne.n	800453a <_svfiprintf_r+0x186>
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	9203      	str	r2, [sp, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bfb8      	it	lt
 80044dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80044e0:	3402      	adds	r4, #2
 80044e2:	9305      	str	r3, [sp, #20]
 80044e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045ac <_svfiprintf_r+0x1f8>
 80044e8:	7821      	ldrb	r1, [r4, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	4650      	mov	r0, sl
 80044ee:	f7fb fe7f 	bl	80001f0 <memchr>
 80044f2:	b138      	cbz	r0, 8004504 <_svfiprintf_r+0x150>
 80044f4:	9b04      	ldr	r3, [sp, #16]
 80044f6:	eba0 000a 	sub.w	r0, r0, sl
 80044fa:	2240      	movs	r2, #64	; 0x40
 80044fc:	4082      	lsls	r2, r0
 80044fe:	4313      	orrs	r3, r2
 8004500:	3401      	adds	r4, #1
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004508:	4825      	ldr	r0, [pc, #148]	; (80045a0 <_svfiprintf_r+0x1ec>)
 800450a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800450e:	2206      	movs	r2, #6
 8004510:	f7fb fe6e 	bl	80001f0 <memchr>
 8004514:	2800      	cmp	r0, #0
 8004516:	d038      	beq.n	800458a <_svfiprintf_r+0x1d6>
 8004518:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <_svfiprintf_r+0x1f0>)
 800451a:	bb1b      	cbnz	r3, 8004564 <_svfiprintf_r+0x1b0>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	3307      	adds	r3, #7
 8004520:	f023 0307 	bic.w	r3, r3, #7
 8004524:	3308      	adds	r3, #8
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452a:	4433      	add	r3, r6
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
 800452e:	e768      	b.n	8004402 <_svfiprintf_r+0x4e>
 8004530:	fb0c 3202 	mla	r2, ip, r2, r3
 8004534:	460c      	mov	r4, r1
 8004536:	2001      	movs	r0, #1
 8004538:	e7a6      	b.n	8004488 <_svfiprintf_r+0xd4>
 800453a:	2300      	movs	r3, #0
 800453c:	3401      	adds	r4, #1
 800453e:	9305      	str	r3, [sp, #20]
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0c0a 	mov.w	ip, #10
 8004546:	4620      	mov	r0, r4
 8004548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800454c:	3a30      	subs	r2, #48	; 0x30
 800454e:	2a09      	cmp	r2, #9
 8004550:	d903      	bls.n	800455a <_svfiprintf_r+0x1a6>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0c6      	beq.n	80044e4 <_svfiprintf_r+0x130>
 8004556:	9105      	str	r1, [sp, #20]
 8004558:	e7c4      	b.n	80044e4 <_svfiprintf_r+0x130>
 800455a:	fb0c 2101 	mla	r1, ip, r1, r2
 800455e:	4604      	mov	r4, r0
 8004560:	2301      	movs	r3, #1
 8004562:	e7f0      	b.n	8004546 <_svfiprintf_r+0x192>
 8004564:	ab03      	add	r3, sp, #12
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	462a      	mov	r2, r5
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <_svfiprintf_r+0x1f4>)
 800456c:	a904      	add	r1, sp, #16
 800456e:	4638      	mov	r0, r7
 8004570:	f3af 8000 	nop.w
 8004574:	1c42      	adds	r2, r0, #1
 8004576:	4606      	mov	r6, r0
 8004578:	d1d6      	bne.n	8004528 <_svfiprintf_r+0x174>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	065b      	lsls	r3, r3, #25
 800457e:	f53f af2d 	bmi.w	80043dc <_svfiprintf_r+0x28>
 8004582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004584:	b01d      	add	sp, #116	; 0x74
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	ab03      	add	r3, sp, #12
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	462a      	mov	r2, r5
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <_svfiprintf_r+0x1f4>)
 8004592:	a904      	add	r1, sp, #16
 8004594:	4638      	mov	r0, r7
 8004596:	f000 f879 	bl	800468c <_printf_i>
 800459a:	e7eb      	b.n	8004574 <_svfiprintf_r+0x1c0>
 800459c:	08004afc 	.word	0x08004afc
 80045a0:	08004b06 	.word	0x08004b06
 80045a4:	00000000 	.word	0x00000000
 80045a8:	08004301 	.word	0x08004301
 80045ac:	08004b02 	.word	0x08004b02

080045b0 <_printf_common>:
 80045b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	4616      	mov	r6, r2
 80045b6:	4699      	mov	r9, r3
 80045b8:	688a      	ldr	r2, [r1, #8]
 80045ba:	690b      	ldr	r3, [r1, #16]
 80045bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c0:	4293      	cmp	r3, r2
 80045c2:	bfb8      	it	lt
 80045c4:	4613      	movlt	r3, r2
 80045c6:	6033      	str	r3, [r6, #0]
 80045c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045cc:	4607      	mov	r7, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	b10a      	cbz	r2, 80045d6 <_printf_common+0x26>
 80045d2:	3301      	adds	r3, #1
 80045d4:	6033      	str	r3, [r6, #0]
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	0699      	lsls	r1, r3, #26
 80045da:	bf42      	ittt	mi
 80045dc:	6833      	ldrmi	r3, [r6, #0]
 80045de:	3302      	addmi	r3, #2
 80045e0:	6033      	strmi	r3, [r6, #0]
 80045e2:	6825      	ldr	r5, [r4, #0]
 80045e4:	f015 0506 	ands.w	r5, r5, #6
 80045e8:	d106      	bne.n	80045f8 <_printf_common+0x48>
 80045ea:	f104 0a19 	add.w	sl, r4, #25
 80045ee:	68e3      	ldr	r3, [r4, #12]
 80045f0:	6832      	ldr	r2, [r6, #0]
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	42ab      	cmp	r3, r5
 80045f6:	dc26      	bgt.n	8004646 <_printf_common+0x96>
 80045f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045fc:	1e13      	subs	r3, r2, #0
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	bf18      	it	ne
 8004602:	2301      	movne	r3, #1
 8004604:	0692      	lsls	r2, r2, #26
 8004606:	d42b      	bmi.n	8004660 <_printf_common+0xb0>
 8004608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800460c:	4649      	mov	r1, r9
 800460e:	4638      	mov	r0, r7
 8004610:	47c0      	blx	r8
 8004612:	3001      	adds	r0, #1
 8004614:	d01e      	beq.n	8004654 <_printf_common+0xa4>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	f003 0306 	and.w	r3, r3, #6
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf02      	ittt	eq
 8004622:	68e5      	ldreq	r5, [r4, #12]
 8004624:	6833      	ldreq	r3, [r6, #0]
 8004626:	1aed      	subeq	r5, r5, r3
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	bf0c      	ite	eq
 800462c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004630:	2500      	movne	r5, #0
 8004632:	4293      	cmp	r3, r2
 8004634:	bfc4      	itt	gt
 8004636:	1a9b      	subgt	r3, r3, r2
 8004638:	18ed      	addgt	r5, r5, r3
 800463a:	2600      	movs	r6, #0
 800463c:	341a      	adds	r4, #26
 800463e:	42b5      	cmp	r5, r6
 8004640:	d11a      	bne.n	8004678 <_printf_common+0xc8>
 8004642:	2000      	movs	r0, #0
 8004644:	e008      	b.n	8004658 <_printf_common+0xa8>
 8004646:	2301      	movs	r3, #1
 8004648:	4652      	mov	r2, sl
 800464a:	4649      	mov	r1, r9
 800464c:	4638      	mov	r0, r7
 800464e:	47c0      	blx	r8
 8004650:	3001      	adds	r0, #1
 8004652:	d103      	bne.n	800465c <_printf_common+0xac>
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465c:	3501      	adds	r5, #1
 800465e:	e7c6      	b.n	80045ee <_printf_common+0x3e>
 8004660:	18e1      	adds	r1, r4, r3
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	2030      	movs	r0, #48	; 0x30
 8004666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800466a:	4422      	add	r2, r4
 800466c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004674:	3302      	adds	r3, #2
 8004676:	e7c7      	b.n	8004608 <_printf_common+0x58>
 8004678:	2301      	movs	r3, #1
 800467a:	4622      	mov	r2, r4
 800467c:	4649      	mov	r1, r9
 800467e:	4638      	mov	r0, r7
 8004680:	47c0      	blx	r8
 8004682:	3001      	adds	r0, #1
 8004684:	d0e6      	beq.n	8004654 <_printf_common+0xa4>
 8004686:	3601      	adds	r6, #1
 8004688:	e7d9      	b.n	800463e <_printf_common+0x8e>
	...

0800468c <_printf_i>:
 800468c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	7e0f      	ldrb	r7, [r1, #24]
 8004692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004694:	2f78      	cmp	r7, #120	; 0x78
 8004696:	4691      	mov	r9, r2
 8004698:	4680      	mov	r8, r0
 800469a:	460c      	mov	r4, r1
 800469c:	469a      	mov	sl, r3
 800469e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046a2:	d807      	bhi.n	80046b4 <_printf_i+0x28>
 80046a4:	2f62      	cmp	r7, #98	; 0x62
 80046a6:	d80a      	bhi.n	80046be <_printf_i+0x32>
 80046a8:	2f00      	cmp	r7, #0
 80046aa:	f000 80d4 	beq.w	8004856 <_printf_i+0x1ca>
 80046ae:	2f58      	cmp	r7, #88	; 0x58
 80046b0:	f000 80c0 	beq.w	8004834 <_printf_i+0x1a8>
 80046b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046bc:	e03a      	b.n	8004734 <_printf_i+0xa8>
 80046be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046c2:	2b15      	cmp	r3, #21
 80046c4:	d8f6      	bhi.n	80046b4 <_printf_i+0x28>
 80046c6:	a101      	add	r1, pc, #4	; (adr r1, 80046cc <_printf_i+0x40>)
 80046c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046cc:	08004725 	.word	0x08004725
 80046d0:	08004739 	.word	0x08004739
 80046d4:	080046b5 	.word	0x080046b5
 80046d8:	080046b5 	.word	0x080046b5
 80046dc:	080046b5 	.word	0x080046b5
 80046e0:	080046b5 	.word	0x080046b5
 80046e4:	08004739 	.word	0x08004739
 80046e8:	080046b5 	.word	0x080046b5
 80046ec:	080046b5 	.word	0x080046b5
 80046f0:	080046b5 	.word	0x080046b5
 80046f4:	080046b5 	.word	0x080046b5
 80046f8:	0800483d 	.word	0x0800483d
 80046fc:	08004765 	.word	0x08004765
 8004700:	080047f7 	.word	0x080047f7
 8004704:	080046b5 	.word	0x080046b5
 8004708:	080046b5 	.word	0x080046b5
 800470c:	0800485f 	.word	0x0800485f
 8004710:	080046b5 	.word	0x080046b5
 8004714:	08004765 	.word	0x08004765
 8004718:	080046b5 	.word	0x080046b5
 800471c:	080046b5 	.word	0x080046b5
 8004720:	080047ff 	.word	0x080047ff
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	1d1a      	adds	r2, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	602a      	str	r2, [r5, #0]
 800472c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004734:	2301      	movs	r3, #1
 8004736:	e09f      	b.n	8004878 <_printf_i+0x1ec>
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	0607      	lsls	r7, r0, #24
 800473e:	f103 0104 	add.w	r1, r3, #4
 8004742:	6029      	str	r1, [r5, #0]
 8004744:	d501      	bpl.n	800474a <_printf_i+0xbe>
 8004746:	681e      	ldr	r6, [r3, #0]
 8004748:	e003      	b.n	8004752 <_printf_i+0xc6>
 800474a:	0646      	lsls	r6, r0, #25
 800474c:	d5fb      	bpl.n	8004746 <_printf_i+0xba>
 800474e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004752:	2e00      	cmp	r6, #0
 8004754:	da03      	bge.n	800475e <_printf_i+0xd2>
 8004756:	232d      	movs	r3, #45	; 0x2d
 8004758:	4276      	negs	r6, r6
 800475a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475e:	485a      	ldr	r0, [pc, #360]	; (80048c8 <_printf_i+0x23c>)
 8004760:	230a      	movs	r3, #10
 8004762:	e012      	b.n	800478a <_printf_i+0xfe>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	6029      	str	r1, [r5, #0]
 800476c:	0605      	lsls	r5, r0, #24
 800476e:	d501      	bpl.n	8004774 <_printf_i+0xe8>
 8004770:	681e      	ldr	r6, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0xee>
 8004774:	0641      	lsls	r1, r0, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0xe4>
 8004778:	881e      	ldrh	r6, [r3, #0]
 800477a:	4853      	ldr	r0, [pc, #332]	; (80048c8 <_printf_i+0x23c>)
 800477c:	2f6f      	cmp	r7, #111	; 0x6f
 800477e:	bf0c      	ite	eq
 8004780:	2308      	moveq	r3, #8
 8004782:	230a      	movne	r3, #10
 8004784:	2100      	movs	r1, #0
 8004786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800478a:	6865      	ldr	r5, [r4, #4]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	2d00      	cmp	r5, #0
 8004790:	bfa2      	ittt	ge
 8004792:	6821      	ldrge	r1, [r4, #0]
 8004794:	f021 0104 	bicge.w	r1, r1, #4
 8004798:	6021      	strge	r1, [r4, #0]
 800479a:	b90e      	cbnz	r6, 80047a0 <_printf_i+0x114>
 800479c:	2d00      	cmp	r5, #0
 800479e:	d04b      	beq.n	8004838 <_printf_i+0x1ac>
 80047a0:	4615      	mov	r5, r2
 80047a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047a6:	fb03 6711 	mls	r7, r3, r1, r6
 80047aa:	5dc7      	ldrb	r7, [r0, r7]
 80047ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b0:	4637      	mov	r7, r6
 80047b2:	42bb      	cmp	r3, r7
 80047b4:	460e      	mov	r6, r1
 80047b6:	d9f4      	bls.n	80047a2 <_printf_i+0x116>
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d10b      	bne.n	80047d4 <_printf_i+0x148>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	07de      	lsls	r6, r3, #31
 80047c0:	d508      	bpl.n	80047d4 <_printf_i+0x148>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6861      	ldr	r1, [r4, #4]
 80047c6:	4299      	cmp	r1, r3
 80047c8:	bfde      	ittt	le
 80047ca:	2330      	movle	r3, #48	; 0x30
 80047cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047d4:	1b52      	subs	r2, r2, r5
 80047d6:	6122      	str	r2, [r4, #16]
 80047d8:	f8cd a000 	str.w	sl, [sp]
 80047dc:	464b      	mov	r3, r9
 80047de:	aa03      	add	r2, sp, #12
 80047e0:	4621      	mov	r1, r4
 80047e2:	4640      	mov	r0, r8
 80047e4:	f7ff fee4 	bl	80045b0 <_printf_common>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d14a      	bne.n	8004882 <_printf_i+0x1f6>
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	b004      	add	sp, #16
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	f043 0320 	orr.w	r3, r3, #32
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	4833      	ldr	r0, [pc, #204]	; (80048cc <_printf_i+0x240>)
 8004800:	2778      	movs	r7, #120	; 0x78
 8004802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	6829      	ldr	r1, [r5, #0]
 800480a:	061f      	lsls	r7, r3, #24
 800480c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004810:	d402      	bmi.n	8004818 <_printf_i+0x18c>
 8004812:	065f      	lsls	r7, r3, #25
 8004814:	bf48      	it	mi
 8004816:	b2b6      	uxthmi	r6, r6
 8004818:	07df      	lsls	r7, r3, #31
 800481a:	bf48      	it	mi
 800481c:	f043 0320 	orrmi.w	r3, r3, #32
 8004820:	6029      	str	r1, [r5, #0]
 8004822:	bf48      	it	mi
 8004824:	6023      	strmi	r3, [r4, #0]
 8004826:	b91e      	cbnz	r6, 8004830 <_printf_i+0x1a4>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	f023 0320 	bic.w	r3, r3, #32
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	2310      	movs	r3, #16
 8004832:	e7a7      	b.n	8004784 <_printf_i+0xf8>
 8004834:	4824      	ldr	r0, [pc, #144]	; (80048c8 <_printf_i+0x23c>)
 8004836:	e7e4      	b.n	8004802 <_printf_i+0x176>
 8004838:	4615      	mov	r5, r2
 800483a:	e7bd      	b.n	80047b8 <_printf_i+0x12c>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	6826      	ldr	r6, [r4, #0]
 8004840:	6961      	ldr	r1, [r4, #20]
 8004842:	1d18      	adds	r0, r3, #4
 8004844:	6028      	str	r0, [r5, #0]
 8004846:	0635      	lsls	r5, r6, #24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	d501      	bpl.n	8004850 <_printf_i+0x1c4>
 800484c:	6019      	str	r1, [r3, #0]
 800484e:	e002      	b.n	8004856 <_printf_i+0x1ca>
 8004850:	0670      	lsls	r0, r6, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0x1c0>
 8004854:	8019      	strh	r1, [r3, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	4615      	mov	r5, r2
 800485c:	e7bc      	b.n	80047d8 <_printf_i+0x14c>
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	1d1a      	adds	r2, r3, #4
 8004862:	602a      	str	r2, [r5, #0]
 8004864:	681d      	ldr	r5, [r3, #0]
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	2100      	movs	r1, #0
 800486a:	4628      	mov	r0, r5
 800486c:	f7fb fcc0 	bl	80001f0 <memchr>
 8004870:	b108      	cbz	r0, 8004876 <_printf_i+0x1ea>
 8004872:	1b40      	subs	r0, r0, r5
 8004874:	6060      	str	r0, [r4, #4]
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	2300      	movs	r3, #0
 800487c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004880:	e7aa      	b.n	80047d8 <_printf_i+0x14c>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	462a      	mov	r2, r5
 8004886:	4649      	mov	r1, r9
 8004888:	4640      	mov	r0, r8
 800488a:	47d0      	blx	sl
 800488c:	3001      	adds	r0, #1
 800488e:	d0ad      	beq.n	80047ec <_printf_i+0x160>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	079b      	lsls	r3, r3, #30
 8004894:	d413      	bmi.n	80048be <_printf_i+0x232>
 8004896:	68e0      	ldr	r0, [r4, #12]
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	4298      	cmp	r0, r3
 800489c:	bfb8      	it	lt
 800489e:	4618      	movlt	r0, r3
 80048a0:	e7a6      	b.n	80047f0 <_printf_i+0x164>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4632      	mov	r2, r6
 80048a6:	4649      	mov	r1, r9
 80048a8:	4640      	mov	r0, r8
 80048aa:	47d0      	blx	sl
 80048ac:	3001      	adds	r0, #1
 80048ae:	d09d      	beq.n	80047ec <_printf_i+0x160>
 80048b0:	3501      	adds	r5, #1
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	9903      	ldr	r1, [sp, #12]
 80048b6:	1a5b      	subs	r3, r3, r1
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dcf2      	bgt.n	80048a2 <_printf_i+0x216>
 80048bc:	e7eb      	b.n	8004896 <_printf_i+0x20a>
 80048be:	2500      	movs	r5, #0
 80048c0:	f104 0619 	add.w	r6, r4, #25
 80048c4:	e7f5      	b.n	80048b2 <_printf_i+0x226>
 80048c6:	bf00      	nop
 80048c8:	08004b0d 	.word	0x08004b0d
 80048cc:	08004b1e 	.word	0x08004b1e

080048d0 <memmove>:
 80048d0:	4288      	cmp	r0, r1
 80048d2:	b510      	push	{r4, lr}
 80048d4:	eb01 0402 	add.w	r4, r1, r2
 80048d8:	d902      	bls.n	80048e0 <memmove+0x10>
 80048da:	4284      	cmp	r4, r0
 80048dc:	4623      	mov	r3, r4
 80048de:	d807      	bhi.n	80048f0 <memmove+0x20>
 80048e0:	1e43      	subs	r3, r0, #1
 80048e2:	42a1      	cmp	r1, r4
 80048e4:	d008      	beq.n	80048f8 <memmove+0x28>
 80048e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ee:	e7f8      	b.n	80048e2 <memmove+0x12>
 80048f0:	4402      	add	r2, r0
 80048f2:	4601      	mov	r1, r0
 80048f4:	428a      	cmp	r2, r1
 80048f6:	d100      	bne.n	80048fa <memmove+0x2a>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004902:	e7f7      	b.n	80048f4 <memmove+0x24>

08004904 <_sbrk_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d06      	ldr	r5, [pc, #24]	; (8004920 <_sbrk_r+0x1c>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f7fc f88a 	bl	8000a28 <_sbrk>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_sbrk_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_sbrk_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	200041b8 	.word	0x200041b8

08004924 <_realloc_r>:
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4680      	mov	r8, r0
 800492a:	4614      	mov	r4, r2
 800492c:	460e      	mov	r6, r1
 800492e:	b921      	cbnz	r1, 800493a <_realloc_r+0x16>
 8004930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	4611      	mov	r1, r2
 8004936:	f7ff bc57 	b.w	80041e8 <_malloc_r>
 800493a:	b92a      	cbnz	r2, 8004948 <_realloc_r+0x24>
 800493c:	f7ff fbe8 	bl	8004110 <_free_r>
 8004940:	4625      	mov	r5, r4
 8004942:	4628      	mov	r0, r5
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004948:	f000 f81b 	bl	8004982 <_malloc_usable_size_r>
 800494c:	4284      	cmp	r4, r0
 800494e:	4607      	mov	r7, r0
 8004950:	d802      	bhi.n	8004958 <_realloc_r+0x34>
 8004952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004956:	d812      	bhi.n	800497e <_realloc_r+0x5a>
 8004958:	4621      	mov	r1, r4
 800495a:	4640      	mov	r0, r8
 800495c:	f7ff fc44 	bl	80041e8 <_malloc_r>
 8004960:	4605      	mov	r5, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	d0ed      	beq.n	8004942 <_realloc_r+0x1e>
 8004966:	42bc      	cmp	r4, r7
 8004968:	4622      	mov	r2, r4
 800496a:	4631      	mov	r1, r6
 800496c:	bf28      	it	cs
 800496e:	463a      	movcs	r2, r7
 8004970:	f7ff fbc0 	bl	80040f4 <memcpy>
 8004974:	4631      	mov	r1, r6
 8004976:	4640      	mov	r0, r8
 8004978:	f7ff fbca 	bl	8004110 <_free_r>
 800497c:	e7e1      	b.n	8004942 <_realloc_r+0x1e>
 800497e:	4635      	mov	r5, r6
 8004980:	e7df      	b.n	8004942 <_realloc_r+0x1e>

08004982 <_malloc_usable_size_r>:
 8004982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004986:	1f18      	subs	r0, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfbc      	itt	lt
 800498c:	580b      	ldrlt	r3, [r1, r0]
 800498e:	18c0      	addlt	r0, r0, r3
 8004990:	4770      	bx	lr
	...

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
