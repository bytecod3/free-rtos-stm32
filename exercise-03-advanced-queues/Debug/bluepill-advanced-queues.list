
bluepill-advanced-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000401c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004454  08004454  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004454  08004454  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004454  08004454  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  20000060  080044bc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  080044bc  000211d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc28  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d5  00000000  00000000  0002ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092c  00000000  00000000  0002fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881b  00000000  00000000  00030704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfbd  00000000  00000000  00048f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008af8d  00000000  00000000  00056edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f0  00000000  00000000  000e1e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000e535c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004114 	.word	0x08004114

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004114 	.word	0x08004114

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	200000d0 	.word	0x200000d0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b09c      	sub	sp, #112	; 0x70
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fac3 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f8d3 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f937 	bl	8000410 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f90b 	bl	80003bc <MX_USART1_UART_Init>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  //  simple queue
  simpleQueue = xQueueCreate(5, sizeof(int));
 80001a6:	2200      	movs	r2, #0
 80001a8:	2104      	movs	r1, #4
 80001aa:	2005      	movs	r0, #5
 80001ac:	f001 fd4c 	bl	8001c48 <xQueueGenericCreate>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a54      	ldr	r2, [pc, #336]	; (8000304 <main+0x174>)
 80001b4:	6013      	str	r3, [r2, #0]

  if(simpleQueue == 0) {
 80001b6:	4b53      	ldr	r3, [pc, #332]	; (8000304 <main+0x174>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d10d      	bne.n	80001da <main+0x4a>
	  char* str = "unable to create queue\r\n";
 80001be:	4b52      	ldr	r3, [pc, #328]	; (8000308 <main+0x178>)
 80001c0:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80001c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80001c4:	f7ff ffc4 	bl	8000150 <strlen>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f04f 33ff 	mov.w	r3, #4294967295
 80001d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80001d2:	484e      	ldr	r0, [pc, #312]	; (800030c <main+0x17c>)
 80001d4:	f001 f9ce 	bl	8001574 <HAL_UART_Transmit>
 80001d8:	e00c      	b.n	80001f4 <main+0x64>
  } else {
	  char* str = "Integer queue created successfully\r\n";
 80001da:	4b4d      	ldr	r3, [pc, #308]	; (8000310 <main+0x180>)
 80001dc:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80001de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80001e0:	f7ff ffb6 	bl	8000150 <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f04f 33ff 	mov.w	r3, #4294967295
 80001ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80001ee:	4847      	ldr	r0, [pc, #284]	; (800030c <main+0x17c>)
 80001f0:	f001 f9c0 	bl	8001574 <HAL_UART_Transmit>
  }


  structQueueHandle = xQueueCreate(2, sizeof(my_struct));
 80001f4:	2200      	movs	r2, #0
 80001f6:	210c      	movs	r1, #12
 80001f8:	2002      	movs	r0, #2
 80001fa:	f001 fd25 	bl	8001c48 <xQueueGenericCreate>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a44      	ldr	r2, [pc, #272]	; (8000314 <main+0x184>)
 8000202:	6013      	str	r3, [r2, #0]

  if(structQueueHandle == pdFALSE) {
 8000204:	4b43      	ldr	r3, [pc, #268]	; (8000314 <main+0x184>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d10d      	bne.n	8000228 <main+0x98>
	  char* str = "unable to create structure queue\r\n";
 800020c:	4b42      	ldr	r3, [pc, #264]	; (8000318 <main+0x188>)
 800020e:	663b      	str	r3, [r7, #96]	; 0x60
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000210:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000212:	f7ff ff9d 	bl	8000150 <strlen>
 8000216:	4603      	mov	r3, r0
 8000218:	b29a      	uxth	r2, r3
 800021a:	f04f 33ff 	mov.w	r3, #4294967295
 800021e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000220:	483a      	ldr	r0, [pc, #232]	; (800030c <main+0x17c>)
 8000222:	f001 f9a7 	bl	8001574 <HAL_UART_Transmit>
 8000226:	e00c      	b.n	8000242 <main+0xb2>
  }  else {
	  char* str = "Structure queue created successfully\r\n";
 8000228:	4b3c      	ldr	r3, [pc, #240]	; (800031c <main+0x18c>)
 800022a:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800022c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800022e:	f7ff ff8f 	bl	8000150 <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800023c:	4833      	ldr	r0, [pc, #204]	; (800030c <main+0x17c>)
 800023e:	f001 f999 	bl	8001574 <HAL_UART_Transmit>
  }

  dataSourceQueueHandle = xQueueCreate(5, sizeof(Data_t));
 8000242:	2200      	movs	r2, #0
 8000244:	2108      	movs	r1, #8
 8000246:	2005      	movs	r0, #5
 8000248:	f001 fcfe 	bl	8001c48 <xQueueGenericCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a34      	ldr	r2, [pc, #208]	; (8000320 <main+0x190>)
 8000250:	6013      	str	r3, [r2, #0]

  if(dataSourceQueueHandle == pdFALSE) {
 8000252:	4b33      	ldr	r3, [pc, #204]	; (8000320 <main+0x190>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10d      	bne.n	8000276 <main+0xe6>
	  char* str = "unable to create data structure queue\r\n";
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <main+0x194>)
 800025c:	65bb      	str	r3, [r7, #88]	; 0x58
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800025e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000260:	f7ff ff76 	bl	8000150 <strlen>
 8000264:	4603      	mov	r3, r0
 8000266:	b29a      	uxth	r2, r3
 8000268:	f04f 33ff 	mov.w	r3, #4294967295
 800026c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800026e:	4827      	ldr	r0, [pc, #156]	; (800030c <main+0x17c>)
 8000270:	f001 f980 	bl	8001574 <HAL_UART_Transmit>
 8000274:	e00c      	b.n	8000290 <main+0x100>
   }  else {
	  char* str = "Data structure queue created successfully\r\n";
 8000276:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <main+0x198>)
 8000278:	65fb      	str	r3, [r7, #92]	; 0x5c
	  HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800027a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800027c:	f7ff ff68 	bl	8000150 <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800028a:	4820      	ldr	r0, [pc, #128]	; (800030c <main+0x17c>)
 800028c:	f001 f972 	bl	8001574 <HAL_UART_Transmit>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000290:	4b26      	ldr	r3, [pc, #152]	; (800032c <main+0x19c>)
 8000292:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000296:	461d      	mov	r5, r3
 8000298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb54 	bl	8001958 <osThreadCreate>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <main+0x1a0>)
 80002b4:	6013      	str	r3, [r2, #0]
//  sendStructTaskHandle = osThreadCreate(osThread(sendStrTask), NULL);

//  osThreadDef(receivefromMultipleTsk, receiveFromMultipleTask, osPriorityNormal, 0, 128);
//  receiveFromMultipleTaskHandle = osThreadCreate(osThread(receivefromMultipleTsk), NULL);

  osThreadDef(CANtsk, CANBusTask, osPriorityNormal, 0, 128);
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0x1a4>)
 80002b8:	f107 0420 	add.w	r4, r7, #32
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANBusTaskHandle = osThreadCreate(osThread(CANtsk), NULL);
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fb41 	bl	8001958 <osThreadCreate>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <main+0x1a8>)
 80002da:	6013      	str	r3, [r2, #0]

  osThreadDef(controllerTsk, ControllerTask, osPriorityNormal, 0, 128);
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <main+0x1ac>)
 80002de:	1d3c      	adds	r4, r7, #4
 80002e0:	461d      	mov	r5, r3
 80002e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(controllerTsk), NULL);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fb30 	bl	8001958 <osThreadCreate>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a11      	ldr	r2, [pc, #68]	; (8000340 <main+0x1b0>)
 80002fc:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80002fe:	f001 fb24 	bl	800194a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000302:	e7fe      	b.n	8000302 <main+0x172>
 8000304:	20000324 	.word	0x20000324
 8000308:	0800412c 	.word	0x0800412c
 800030c:	200002d0 	.word	0x200002d0
 8000310:	08004148 	.word	0x08004148
 8000314:	20000328 	.word	0x20000328
 8000318:	08004170 	.word	0x08004170
 800031c:	08004194 	.word	0x08004194
 8000320:	2000032c 	.word	0x2000032c
 8000324:	080041bc 	.word	0x080041bc
 8000328:	080041e4 	.word	0x080041e4
 800032c:	0800421c 	.word	0x0800421c
 8000330:	20000318 	.word	0x20000318
 8000334:	08004240 	.word	0x08004240
 8000338:	2000031c 	.word	0x2000031c
 800033c:	0800426c 	.word	0x0800426c
 8000340:	20000320 	.word	0x20000320

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fa4c 	bl	80037f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000366:	2302      	movs	r3, #2
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000372:	2300      	movs	r3, #0
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fc9a 	bl	8000cb4 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000386:	f000 f8cd 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 ff08 	bl	80011b8 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f8b9 	bl	8000524 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <MX_USART1_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f001 f86e 	bl	80014d4 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f891 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200002d0 	.word	0x200002d0
 800040c:	40013800 	.word	0x40013800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_GPIO_Init+0x58>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a13      	ldr	r2, [pc, #76]	; (8000468 <MX_GPIO_Init+0x58>)
 800041c:	f043 0310 	orr.w	r3, r3, #16
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_GPIO_Init+0x58>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0310 	and.w	r3, r3, #16
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_GPIO_Init+0x58>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <MX_GPIO_Init+0x58>)
 8000434:	f043 0320 	orr.w	r3, r3, #32
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_GPIO_Init+0x58>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0320 	and.w	r3, r3, #32
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_GPIO_Init+0x58>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a07      	ldr	r2, [pc, #28]	; (8000468 <MX_GPIO_Init+0x58>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <MX_GPIO_Init+0x58>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000

0800046c <CANBusTask>:
		}

	}
}

void CANBusTask(void const * argument) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	Data_t canPacket;
	canPacket.src = "CANBUS";
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <CANBusTask+0x38>)
 8000476:	60fb      	str	r3, [r7, #12]
	canPacket.data = 120;
 8000478:	2378      	movs	r3, #120	; 0x78
 800047a:	613b      	str	r3, [r7, #16]

	TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	61fb      	str	r3, [r7, #28]

	while(1) {
		if(xQueueSend(dataSourceQueueHandle, &canPacket, xTicksToWait) == pdPASS) {
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <CANBusTask+0x3c>)
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	f107 010c 	add.w	r1, r7, #12
 8000488:	2300      	movs	r3, #0
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	f001 fc36 	bl	8001cfc <xQueueGenericSend>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d102      	bne.n	800049c <CANBusTask+0x30>
			char* str = "Sent from CANBUS success";
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <CANBusTask+0x40>)
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	e7f1      	b.n	8000480 <CANBusTask+0x14>
			//HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
		} else {
			char* str = "Sent from CANBUS failed";
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <CANBusTask+0x44>)
 800049e:	61bb      	str	r3, [r7, #24]
		if(xQueueSend(dataSourceQueueHandle, &canPacket, xTicksToWait) == pdPASS) {
 80004a0:	e7ee      	b.n	8000480 <CANBusTask+0x14>
 80004a2:	bf00      	nop
 80004a4:	08004398 	.word	0x08004398
 80004a8:	2000032c 	.word	0x2000032c
 80004ac:	080043a0 	.word	0x080043a0
 80004b0:	080043bc 	.word	0x080043bc

080004b4 <ControllerTask>:
		}

	}
}

void ControllerTask(void const * argument) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b094      	sub	sp, #80	; 0x50
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	Data_t lReceivedValue;
	BaseType_t xStatus;

	while(1) {
		xStatus = xQueueReceive(dataSourceQueueHandle, &lReceivedValue, 100);
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <ControllerTask+0x54>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80004c4:	2264      	movs	r2, #100	; 0x64
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fd16 	bl	8001ef8 <xQueueReceive>
 80004cc:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(xStatus == pdPASS) {
 80004ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d1f3      	bne.n	80004bc <ControllerTask+0x8>
			char recv_buffer[56];
			sprintf(recv_buffer,
 80004d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80004d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004d8:	f107 000c 	add.w	r0, r7, #12
 80004dc:	490b      	ldr	r1, [pc, #44]	; (800050c <ControllerTask+0x58>)
 80004de:	f003 f967 	bl	80037b0 <siprintf>

			// handle the sources
			// CANBUS
			// HMI

			HAL_UART_Transmit(&huart1, (uint8_t*)recv_buffer, strlen(recv_buffer), HAL_MAX_DELAY);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fe32 	bl	8000150 <strlen>
 80004ec:	4603      	mov	r3, r0
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	f107 010c 	add.w	r1, r7, #12
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <ControllerTask+0x5c>)
 80004fa:	f001 f83b 	bl	8001574 <HAL_UART_Transmit>
			vTaskDelay(pdMS_TO_TICKS(50));
 80004fe:	2032      	movs	r0, #50	; 0x32
 8000500:	f002 f87e 	bl	8002600 <vTaskDelay>
		xStatus = xQueueReceive(dataSourceQueueHandle, &lReceivedValue, 100);
 8000504:	e7da      	b.n	80004bc <ControllerTask+0x8>
 8000506:	bf00      	nop
 8000508:	2000032c 	.word	0x2000032c
 800050c:	080043d4 	.word	0x080043d4
 8000510:	200002d0 	.word	0x200002d0

08000514 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f001 fa67 	bl	80019f0 <osDelay>
 8000522:	e7fb      	b.n	800051c <StartDefaultTask+0x8>

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_MspInit+0x4c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <HAL_MspInit+0x4c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_MspInit+0x4c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_MspInit+0x4c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <HAL_MspInit+0x4c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_MspInit+0x4c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	210f      	movs	r1, #15
 800056a:	f06f 0001 	mvn.w	r0, #1
 800056e:	f000 f9f4 	bl	800095a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <HAL_UART_MspInit+0x8c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d131      	bne.n	8000604 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <HAL_UART_MspInit+0x94>)
 80005e6:	f000 f9e1 	bl	80009ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_UART_MspInit+0x94>)
 8000600:	f000 f9d4 	bl	80009ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013800 	.word	0x40013800
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 f8b1 	bl	80007ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800064a:	f002 fc09 	bl	8002e60 <xTaskGetSchedulerState>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d001      	beq.n	8000658 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000654:	f002 fe80 	bl	8003358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f003 f8b8 	bl	8003800 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20005000 	.word	0x20005000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	20000330 	.word	0x20000330
 80006c4:	200011d8 	.word	0x200011d8

080006c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff fff8 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006da:	490c      	ldr	r1, [pc, #48]	; (800070c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006f0:	4c09      	ldr	r4, [pc, #36]	; (8000718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f003 f885 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd45 	bl	8000190 <main>
  bx lr
 8000706:	4770      	bx	lr
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000710:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8000714:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000718:	200011d4 	.word	0x200011d4

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f907 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	200f      	movs	r0, #15
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff fef8 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f911 	bl	8000992 <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f8e7 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <HAL_IncTick+0x20>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000334 	.word	0x20000334

080007d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000334 	.word	0x20000334

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff90 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff49 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff5e 	bl	800082c <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff90 	bl	800089c <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5f 	bl	8000848 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffb0 	bl	8000900 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e169      	b.n	8000c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009c0:	2201      	movs	r2, #1
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	429a      	cmp	r2, r3
 80009da:	f040 8158 	bne.w	8000c8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4a9a      	ldr	r2, [pc, #616]	; (8000c4c <HAL_GPIO_Init+0x2a0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d05e      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
 80009e8:	4a98      	ldr	r2, [pc, #608]	; (8000c4c <HAL_GPIO_Init+0x2a0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d875      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 80009ee:	4a98      	ldr	r2, [pc, #608]	; (8000c50 <HAL_GPIO_Init+0x2a4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d058      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
 80009f4:	4a96      	ldr	r2, [pc, #600]	; (8000c50 <HAL_GPIO_Init+0x2a4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d86f      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 80009fa:	4a96      	ldr	r2, [pc, #600]	; (8000c54 <HAL_GPIO_Init+0x2a8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d052      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
 8000a00:	4a94      	ldr	r2, [pc, #592]	; (8000c54 <HAL_GPIO_Init+0x2a8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d869      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 8000a06:	4a94      	ldr	r2, [pc, #592]	; (8000c58 <HAL_GPIO_Init+0x2ac>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d04c      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
 8000a0c:	4a92      	ldr	r2, [pc, #584]	; (8000c58 <HAL_GPIO_Init+0x2ac>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d863      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 8000a12:	4a92      	ldr	r2, [pc, #584]	; (8000c5c <HAL_GPIO_Init+0x2b0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d046      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
 8000a18:	4a90      	ldr	r2, [pc, #576]	; (8000c5c <HAL_GPIO_Init+0x2b0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d85d      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d82a      	bhi.n	8000a78 <HAL_GPIO_Init+0xcc>
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d859      	bhi.n	8000ada <HAL_GPIO_Init+0x12e>
 8000a26:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <HAL_GPIO_Init+0x80>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000aa7 	.word	0x08000aa7
 8000a30:	08000a81 	.word	0x08000a81
 8000a34:	08000a93 	.word	0x08000a93
 8000a38:	08000ad5 	.word	0x08000ad5
 8000a3c:	08000adb 	.word	0x08000adb
 8000a40:	08000adb 	.word	0x08000adb
 8000a44:	08000adb 	.word	0x08000adb
 8000a48:	08000adb 	.word	0x08000adb
 8000a4c:	08000adb 	.word	0x08000adb
 8000a50:	08000adb 	.word	0x08000adb
 8000a54:	08000adb 	.word	0x08000adb
 8000a58:	08000adb 	.word	0x08000adb
 8000a5c:	08000adb 	.word	0x08000adb
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000adb 	.word	0x08000adb
 8000a68:	08000adb 	.word	0x08000adb
 8000a6c:	08000adb 	.word	0x08000adb
 8000a70:	08000a89 	.word	0x08000a89
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	4a79      	ldr	r2, [pc, #484]	; (8000c60 <HAL_GPIO_Init+0x2b4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d013      	beq.n	8000aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a7e:	e02c      	b.n	8000ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e029      	b.n	8000adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e024      	b.n	8000adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	3308      	adds	r3, #8
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e01f      	b.n	8000adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e01a      	b.n	8000adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e013      	b.n	8000adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d105      	bne.n	8000ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000abc:	2308      	movs	r3, #8
 8000abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	611a      	str	r2, [r3, #16]
          break;
 8000ac6:	e009      	b.n	8000adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	615a      	str	r2, [r3, #20]
          break;
 8000ad2:	e003      	b.n	8000adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e000      	b.n	8000adc <HAL_GPIO_Init+0x130>
          break;
 8000ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2bff      	cmp	r3, #255	; 0xff
 8000ae0:	d801      	bhi.n	8000ae6 <HAL_GPIO_Init+0x13a>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	e001      	b.n	8000aea <HAL_GPIO_Init+0x13e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d802      	bhi.n	8000af8 <HAL_GPIO_Init+0x14c>
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	e002      	b.n	8000afe <HAL_GPIO_Init+0x152>
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	3b08      	subs	r3, #8
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	210f      	movs	r1, #15
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	401a      	ands	r2, r3
 8000b10:	6a39      	ldr	r1, [r7, #32]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 80b1 	beq.w	8000c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2c:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <HAL_GPIO_Init+0x2b8>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <HAL_GPIO_Init+0x2b8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b44:	4a48      	ldr	r2, [pc, #288]	; (8000c68 <HAL_GPIO_Init+0x2bc>)
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a40      	ldr	r2, [pc, #256]	; (8000c6c <HAL_GPIO_Init+0x2c0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d013      	beq.n	8000b98 <HAL_GPIO_Init+0x1ec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3f      	ldr	r2, [pc, #252]	; (8000c70 <HAL_GPIO_Init+0x2c4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d00d      	beq.n	8000b94 <HAL_GPIO_Init+0x1e8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <HAL_GPIO_Init+0x2c8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d007      	beq.n	8000b90 <HAL_GPIO_Init+0x1e4>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <HAL_GPIO_Init+0x2cc>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d101      	bne.n	8000b8c <HAL_GPIO_Init+0x1e0>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e006      	b.n	8000b9a <HAL_GPIO_Init+0x1ee>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e004      	b.n	8000b9a <HAL_GPIO_Init+0x1ee>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x1ee>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <HAL_GPIO_Init+0x1ee>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b9c:	f002 0203 	and.w	r2, r2, #3
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	4093      	lsls	r3, r2
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000baa:	492f      	ldr	r1, [pc, #188]	; (8000c68 <HAL_GPIO_Init+0x2bc>)
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	492c      	ldr	r1, [pc, #176]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4928      	ldr	r1, [pc, #160]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	4922      	ldr	r1, [pc, #136]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60cb      	str	r3, [r1, #12]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	491e      	ldr	r1, [pc, #120]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	4918      	ldr	r1, [pc, #96]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	4914      	ldr	r1, [pc, #80]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d021      	beq.n	8000c80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	490e      	ldr	r1, [pc, #56]	; (8000c7c <HAL_GPIO_Init+0x2d0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
 8000c48:	e021      	b.n	8000c8e <HAL_GPIO_Init+0x2e2>
 8000c4a:	bf00      	nop
 8000c4c:	10320000 	.word	0x10320000
 8000c50:	10310000 	.word	0x10310000
 8000c54:	10220000 	.word	0x10220000
 8000c58:	10210000 	.word	0x10210000
 8000c5c:	10120000 	.word	0x10120000
 8000c60:	10110000 	.word	0x10110000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40011000 	.word	0x40011000
 8000c78:	40011400 	.word	0x40011400
 8000c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_GPIO_Init+0x304>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <HAL_GPIO_Init+0x304>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	3301      	adds	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f47f ae8e 	bne.w	80009c0 <HAL_GPIO_Init+0x14>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	372c      	adds	r7, #44	; 0x2c
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e272      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8087 	beq.w	8000de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd4:	4b92      	ldr	r3, [pc, #584]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d00c      	beq.n	8000cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce0:	4b8f      	ldr	r3, [pc, #572]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d112      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
 8000cec:	4b8c      	ldr	r3, [pc, #560]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf8:	d10b      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	4b89      	ldr	r3, [pc, #548]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d06c      	beq.n	8000de0 <HAL_RCC_OscConfig+0x12c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d168      	bne.n	8000de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e24c      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x76>
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a7f      	ldr	r2, [pc, #508]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e02e      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x98>
 8000d32:	4b7b      	ldr	r3, [pc, #492]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7a      	ldr	r2, [pc, #488]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b78      	ldr	r3, [pc, #480]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a77      	ldr	r2, [pc, #476]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e01d      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0xbc>
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a71      	ldr	r2, [pc, #452]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b6f      	ldr	r3, [pc, #444]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a6e      	ldr	r2, [pc, #440]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e00b      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d70:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6a      	ldr	r2, [pc, #424]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b68      	ldr	r3, [pc, #416]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a67      	ldr	r2, [pc, #412]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fd1e 	bl	80007d0 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fd1a 	bl	80007d0 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e200      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0xe4>
 8000db6:	e014      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fd0a 	bl	80007d0 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fd06 	bl	80007d0 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b64      	cmp	r3, #100	; 0x64
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e1ec      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x10c>
 8000dde:	e000      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d063      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d11c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d001      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e1c0      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4939      	ldr	r1, [pc, #228]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e03a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d020      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fcbf 	bl	80007d0 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e56:	f7ff fcbb 	bl	80007d0 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e1a1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4927      	ldr	r1, [pc, #156]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc9e 	bl	80007d0 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc9a 	bl	80007d0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e180      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d03a      	beq.n	8000f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc7e 	bl	80007d0 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc7a 	bl	80007d0 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e160      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f0      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 face 	bl	8001498 <RCC_Delay>
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc64 	bl	80007d0 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0a:	e00f      	b.n	8000f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc60 	bl	80007d0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d908      	bls.n	8000f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e146      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	42420000 	.word	0x42420000
 8000f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2c:	4b92      	ldr	r3, [pc, #584]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e9      	bne.n	8000f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a6 	beq.w	8001092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b88      	ldr	r3, [pc, #544]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a87      	ldr	r2, [pc, #540]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b85      	ldr	r3, [pc, #532]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	4b82      	ldr	r3, [pc, #520]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7e      	ldr	r2, [pc, #504]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fc21 	bl	80007d0 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fc1d 	bl	80007d0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	; 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e103      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b75      	ldr	r3, [pc, #468]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x312>
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	e02d      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x334>
 8000fce:	4b6a      	ldr	r3, [pc, #424]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a69      	ldr	r2, [pc, #420]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	4b67      	ldr	r3, [pc, #412]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a66      	ldr	r2, [pc, #408]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e01c      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x356>
 8000ff0:	4b61      	ldr	r3, [pc, #388]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a60      	ldr	r2, [pc, #384]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	e00b      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 800100a:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	4b58      	ldr	r3, [pc, #352]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102a:	f7ff fbd1 	bl	80007d0 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001030:	e00a      	b.n	8001048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff fbcd 	bl	80007d0 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001040:	4293      	cmp	r3, r2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e0b1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ee      	beq.n	8001032 <HAL_RCC_OscConfig+0x37e>
 8001054:	e014      	b.n	8001080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fbbb 	bl	80007d0 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff fbb7 	bl	80007d0 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	; 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e09b      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1ee      	bne.n	800105e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d105      	bne.n	8001092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d061      	beq.n	800116c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d146      	bne.n	800113e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fb8b 	bl	80007d0 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fb87 	bl	80007d0 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e06d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4921      	ldr	r1, [pc, #132]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a19      	ldr	r1, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	430b      	orrs	r3, r1
 800110a:	491b      	ldr	r1, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb5b 	bl	80007d0 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fb57 	bl	80007d0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e03d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x46a>
 800113c:	e035      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fb44 	bl	80007d0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff fb40 	bl	80007d0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e026      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x498>
 800116a:	e01e      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e019      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8001178:	40021000 	.word	0x40021000
 800117c:	40007000 	.word	0x40007000
 8001180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x500>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0d0      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011cc:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d910      	bls.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b67      	ldr	r3, [pc, #412]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4965      	ldr	r1, [pc, #404]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800121e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d040      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e073      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06b      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 0203 	bic.w	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4936      	ldr	r1, [pc, #216]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a8:	f7ff fa92 	bl	80007d0 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff fa8e 	bl	80007d0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e053      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 020c 	and.w	r2, r3, #12
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1eb      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d210      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0207 	bic.w	r2, r3, #7
 80012ee:	4922      	ldr	r1, [pc, #136]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f821 	bl	800138c <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1cc>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f9f0 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000
 800137c:	40021000 	.word	0x40021000
 8001380:	080043f4 	.word	0x080043f4
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x30>
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ba:	e027      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 80013be:	613b      	str	r3, [r7, #16]
      break;
 80013c0:	e027      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_RCC_GetSysClockFreq+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e004      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	613b      	str	r3, [r7, #16]
      break;
 800140a:	e002      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 800140e:	613b      	str	r3, [r7, #16]
      break;
 8001410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001412:	693b      	ldr	r3, [r7, #16]
}
 8001414:	4618      	mov	r0, r3
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	007a1200 	.word	0x007a1200
 8001428:	0800440c 	.word	0x0800440c
 800142c:	0800441c 	.word	0x0800441c
 8001430:	003d0900 	.word	0x003d0900

08001434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <HAL_RCC_GetHCLKFreq+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800144c:	f7ff fff2 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <HAL_RCC_GetPCLK1Freq+0x24>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	08004404 	.word	0x08004404

08001470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001474:	f7ff ffde 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	08004404 	.word	0x08004404

08001498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <RCC_Delay+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <RCC_Delay+0x38>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0a5b      	lsrs	r3, r3, #9
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b4:	bf00      	nop
  }
  while (Delay --);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	60fa      	str	r2, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <RCC_Delay+0x1c>
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000000 	.word	0x20000000
 80014d0:	10624dd3 	.word	0x10624dd3

080014d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e042      	b.n	800156c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f840 	bl	8000580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f971 	bl	8001800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800152c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800153c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800154c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b20      	cmp	r3, #32
 8001592:	d175      	bne.n	8001680 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_UART_Transmit+0x2c>
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e06e      	b.n	8001682 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2221      	movs	r2, #33	; 0x21
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015b2:	f7ff f90d 	bl	80007d0 <HAL_GetTick>
 80015b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015cc:	d108      	bne.n	80015e0 <HAL_UART_Transmit+0x6c>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	e003      	b.n	80015e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015e8:	e02e      	b.n	8001648 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f848 	bl	800168a <UART_WaitOnFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e03a      	b.n	8001682 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	3302      	adds	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	e007      	b.n	800163a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800164c:	b29b      	uxth	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1cb      	bne.n	80015ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f814 	bl	800168a <UART_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e006      	b.n	8001682 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800169a:	e03b      	b.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d037      	beq.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a4:	f7ff f894 	bl	80007d0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	6a3a      	ldr	r2, [r7, #32]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d302      	bcc.n	80016ba <UART_WaitOnFlagUntilTimeout+0x30>
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e03a      	b.n	8001734 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b80      	cmp	r3, #128	; 0x80
 80016d0:	d020      	beq.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d01d      	beq.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d116      	bne.n	8001714 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f81d 	bl	800173c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2208      	movs	r2, #8
 8001706:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e00f      	b.n	8001734 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4013      	ands	r3, r2
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	429a      	cmp	r2, r3
 8001730:	d0b4      	beq.n	800169c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800173c:	b480      	push	{r7}
 800173e:	b095      	sub	sp, #84	; 0x54
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	330c      	adds	r3, #12
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	e853 3f00 	ldrex	r3, [r3]
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800175a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	330c      	adds	r3, #12
 8001762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001764:	643a      	str	r2, [r7, #64]	; 0x40
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800176a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800176c:	e841 2300 	strex	r3, r2, [r1]
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e5      	bne.n	8001744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3314      	adds	r3, #20
 800177e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	e853 3f00 	ldrex	r3, [r3]
 8001786:	61fb      	str	r3, [r7, #28]
   return(result);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3314      	adds	r3, #20
 8001796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001798:	62fa      	str	r2, [r7, #44]	; 0x2c
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800179c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a0:	e841 2300 	strex	r3, r2, [r1]
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e5      	bne.n	8001778 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d119      	bne.n	80017e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	330c      	adds	r3, #12
 80017ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	e853 3f00 	ldrex	r3, [r3]
 80017c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f023 0310 	bic.w	r3, r3, #16
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	330c      	adds	r3, #12
 80017d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017d4:	61ba      	str	r2, [r7, #24]
 80017d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017d8:	6979      	ldr	r1, [r7, #20]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	e841 2300 	strex	r3, r2, [r1]
 80017e0:	613b      	str	r3, [r7, #16]
   return(result);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e5      	bne.n	80017b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80017f6:	bf00      	nop
 80017f8:	3754      	adds	r7, #84	; 0x54
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800183a:	f023 030c 	bic.w	r3, r3, #12
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	430b      	orrs	r3, r1
 8001846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <UART_SetConfig+0x114>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d103      	bne.n	8001870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001868:	f7ff fe02 	bl	8001470 <HAL_RCC_GetPCLK2Freq>
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	e002      	b.n	8001876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001870:	f7ff fdea 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
 8001874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <UART_SetConfig+0x118>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	0119      	lsls	r1, r3, #4
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	441a      	add	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <UART_SetConfig+0x118>)
 80018ae:	fba3 0302 	umull	r0, r3, r3, r2
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2064      	movs	r0, #100	; 0x64
 80018b6:	fb00 f303 	mul.w	r3, r0, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	3332      	adds	r3, #50	; 0x32
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <UART_SetConfig+0x118>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018cc:	4419      	add	r1, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009a      	lsls	r2, r3, #2
 80018d8:	441a      	add	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <UART_SetConfig+0x118>)
 80018e6:	fba3 0302 	umull	r0, r3, r3, r2
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2064      	movs	r0, #100	; 0x64
 80018ee:	fb00 f303 	mul.w	r3, r0, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	3332      	adds	r3, #50	; 0x32
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <UART_SetConfig+0x118>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	f003 020f 	and.w	r2, r3, #15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	440a      	add	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40013800 	.word	0x40013800
 8001918:	51eb851f 	.word	0x51eb851f

0800191c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	2b84      	cmp	r3, #132	; 0x84
 8001930:	d005      	beq.n	800193e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001932:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	3303      	adds	r3, #3
 800193c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800194e:	f000 fe8b 	bl	8002668 <vTaskStartScheduler>
  
  return osOK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}

08001958 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af04      	add	r7, sp, #16
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d020      	beq.n	80019ac <osThreadCreate+0x54>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01c      	beq.n	80019ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685c      	ldr	r4, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691e      	ldr	r6, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ffc9 	bl	800191c <makeFreeRtosPriority>
 800198a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001994:	9202      	str	r2, [sp, #8]
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	9100      	str	r1, [sp, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4632      	mov	r2, r6
 800199e:	4629      	mov	r1, r5
 80019a0:	4620      	mov	r0, r4
 80019a2:	f000 fc99 	bl	80022d8 <xTaskCreateStatic>
 80019a6:	4603      	mov	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e01c      	b.n	80019e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685c      	ldr	r4, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019b8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ffab 	bl	800191c <makeFreeRtosPriority>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	9200      	str	r2, [sp, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4632      	mov	r2, r6
 80019d4:	4629      	mov	r1, r5
 80019d6:	4620      	mov	r0, r4
 80019d8:	f000 fcdb 	bl	8002392 <xTaskCreate>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <osDelay+0x16>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	e000      	b.n	8001a08 <osDelay+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fdf9 	bl	8002600 <vTaskDelay>
  
  return osOK;
 8001a0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f103 0208 	add.w	r2, r3, #8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f103 0208 	add.w	r2, r3, #8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f103 0208 	add.w	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aca:	d103      	bne.n	8001ad4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e00c      	b.n	8001aee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e002      	b.n	8001ae2 <vListInsert+0x2e>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d2f6      	bcs.n	8001adc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6892      	ldr	r2, [r2, #8]
 8001b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6852      	ldr	r2, [r2, #4]
 8001b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d103      	bne.n	8001b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
	...

08001b78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b90:	f383 8811 	msr	BASEPRI, r3
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b9e:	bf00      	nop
 8001ba0:	e7fe      	b.n	8001ba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ba2:	f001 fb5b 	bl	800325c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	441a      	add	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	441a      	add	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	22ff      	movs	r2, #255	; 0xff
 8001be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	22ff      	movs	r2, #255	; 0xff
 8001bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d114      	bne.n	8001c22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01a      	beq.n	8001c36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3310      	adds	r3, #16
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 ff6f 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d012      	beq.n	8001c36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <xQueueGenericReset+0xcc>)
 8001c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	e009      	b.n	8001c36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3310      	adds	r3, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fef6 	bl	8001a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3324      	adds	r3, #36	; 0x24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fef1 	bl	8001a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c36:	f001 fb41 	bl	80032bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	e000ed04 	.word	0xe000ed04

08001c48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	613b      	str	r3, [r7, #16]
}
 8001c6e:	bf00      	nop
 8001c70:	e7fe      	b.n	8001c70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3348      	adds	r3, #72	; 0x48
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fbad 	bl	80033e0 <pvPortMalloc>
 8001c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d011      	beq.n	8001cb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3348      	adds	r3, #72	; 0x48
 8001c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ca0:	79fa      	ldrb	r2, [r7, #7]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f805 	bl	8001cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e002      	b.n	8001cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cea:	2101      	movs	r1, #1
 8001cec:	69b8      	ldr	r0, [r7, #24]
 8001cee:	f7ff ff43 	bl	8001b78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08e      	sub	sp, #56	; 0x38
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <xQueueGenericSend+0x32>
	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d2a:	bf00      	nop
 8001d2c:	e7fe      	b.n	8001d2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <xQueueGenericSend+0x40>
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <xQueueGenericSend+0x44>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <xQueueGenericSend+0x46>
 8001d40:	2300      	movs	r3, #0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <xQueueGenericSend+0x60>
	__asm volatile
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d58:	bf00      	nop
 8001d5a:	e7fe      	b.n	8001d5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d103      	bne.n	8001d6a <xQueueGenericSend+0x6e>
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <xQueueGenericSend+0x72>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <xQueueGenericSend+0x74>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10a      	bne.n	8001d8a <xQueueGenericSend+0x8e>
	__asm volatile
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	623b      	str	r3, [r7, #32]
}
 8001d86:	bf00      	nop
 8001d88:	e7fe      	b.n	8001d88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d8a:	f001 f869 	bl	8002e60 <xTaskGetSchedulerState>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <xQueueGenericSend+0x9e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <xQueueGenericSend+0xa2>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <xQueueGenericSend+0xa4>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <xQueueGenericSend+0xbe>
	__asm volatile
 8001da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	61fb      	str	r3, [r7, #28]
}
 8001db6:	bf00      	nop
 8001db8:	e7fe      	b.n	8001db8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dba:	f001 fa4f 	bl	800325c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d302      	bcc.n	8001dd0 <xQueueGenericSend+0xd4>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d129      	bne.n	8001e24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dd6:	f000 f96f 	bl	80020b8 <prvCopyDataToQueue>
 8001dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	3324      	adds	r3, #36	; 0x24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fe7d 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <xQueueGenericSend+0x1f8>)
 8001df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	e00a      	b.n	8001e1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <xQueueGenericSend+0x1f8>)
 8001e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e1c:	f001 fa4e 	bl	80032bc <vPortExitCritical>
				return pdPASS;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e063      	b.n	8001eec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e2a:	f001 fa47 	bl	80032bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e05c      	b.n	8001eec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 feb5 	bl	8002bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e46:	f001 fa39 	bl	80032bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e4a:	f000 fc6d 	bl	8002728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e4e:	f001 fa05 	bl	800325c <vPortEnterCritical>
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d103      	bne.n	8001e68 <xQueueGenericSend+0x16c>
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d103      	bne.n	8001e7e <xQueueGenericSend+0x182>
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7e:	f001 fa1d 	bl	80032bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e82:	1d3a      	adds	r2, r7, #4
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fea4 	bl	8002bd8 <xTaskCheckForTimeOut>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d124      	bne.n	8001ee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e98:	f000 fa06 	bl	80022a8 <prvIsQueueFull>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d018      	beq.n	8001ed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fdf8 	bl	8002aa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eb2:	f000 f991 	bl	80021d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001eb6:	f000 fc45 	bl	8002744 <xTaskResumeAll>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f af7c 	bne.w	8001dba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <xQueueGenericSend+0x1f8>)
 8001ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	e772      	b.n	8001dba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ed6:	f000 f97f 	bl	80021d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001eda:	f000 fc33 	bl	8002744 <xTaskResumeAll>
 8001ede:	e76c      	b.n	8001dba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee2:	f000 f979 	bl	80021d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ee6:	f000 fc2d 	bl	8002744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3738      	adds	r7, #56	; 0x38
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	e000ed04 	.word	0xe000ed04

08001ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <xQueueReceive+0x30>
	__asm volatile
 8001f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f16:	f383 8811 	msr	BASEPRI, r3
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	623b      	str	r3, [r7, #32]
}
 8001f24:	bf00      	nop
 8001f26:	e7fe      	b.n	8001f26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <xQueueReceive+0x3e>
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <xQueueReceive+0x42>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <xQueueReceive+0x44>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <xQueueReceive+0x5e>
	__asm volatile
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	61fb      	str	r3, [r7, #28]
}
 8001f52:	bf00      	nop
 8001f54:	e7fe      	b.n	8001f54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f56:	f000 ff83 	bl	8002e60 <xTaskGetSchedulerState>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <xQueueReceive+0x6e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <xQueueReceive+0x72>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <xQueueReceive+0x74>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <xQueueReceive+0x8e>
	__asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	61bb      	str	r3, [r7, #24]
}
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f86:	f001 f969 	bl	800325c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01f      	beq.n	8001fd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f9a:	f000 f8f7 	bl	800218c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fd98 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <xQueueReceive+0x1bc>)
 8001fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fce:	f001 f975 	bl	80032bc <vPortExitCritical>
				return pdPASS;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e069      	b.n	80020aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fdc:	f001 f96e 	bl	80032bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e062      	b.n	80020aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fddc 	bl	8002bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ff8:	f001 f960 	bl	80032bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ffc:	f000 fb94 	bl	8002728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002000:	f001 f92c 	bl	800325c <vPortEnterCritical>
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800200a:	b25b      	sxtb	r3, r3
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d103      	bne.n	800201a <xQueueReceive+0x122>
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002020:	b25b      	sxtb	r3, r3
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d103      	bne.n	8002030 <xQueueReceive+0x138>
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002030:	f001 f944 	bl	80032bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002034:	1d3a      	adds	r2, r7, #4
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fdcb 	bl	8002bd8 <xTaskCheckForTimeOut>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d123      	bne.n	8002090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800204a:	f000 f917 	bl	800227c <prvIsQueueEmpty>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	3324      	adds	r3, #36	; 0x24
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd1f 	bl	8002aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002064:	f000 f8b8 	bl	80021d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002068:	f000 fb6c 	bl	8002744 <xTaskResumeAll>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d189      	bne.n	8001f86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <xQueueReceive+0x1bc>)
 8002074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	e780      	b.n	8001f86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002086:	f000 f8a7 	bl	80021d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800208a:	f000 fb5b 	bl	8002744 <xTaskResumeAll>
 800208e:	e77a      	b.n	8001f86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002092:	f000 f8a1 	bl	80021d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002096:	f000 fb55 	bl	8002744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800209a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800209c:	f000 f8ee 	bl	800227c <prvIsQueueEmpty>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f43f af6f 	beq.w	8001f86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80020a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3730      	adds	r7, #48	; 0x30
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d14d      	bne.n	800217a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 feda 	bl	8002e9c <xTaskPriorityDisinherit>
 80020e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e043      	b.n	800217a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d119      	bne.n	800212c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6858      	ldr	r0, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	461a      	mov	r2, r3
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	f001 fba8 	bl	8003858 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	441a      	add	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d32b      	bcc.n	800217a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e026      	b.n	800217a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	461a      	mov	r2, r3
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	f001 fb8e 	bl	8003858 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	425b      	negs	r3, r3
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d207      	bcs.n	8002168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	425b      	negs	r3, r3
 8002162:	441a      	add	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d105      	bne.n	800217a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3b01      	subs	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002182:	697b      	ldr	r3, [r7, #20]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d018      	beq.n	80021d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	441a      	add	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d303      	bcc.n	80021c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68d9      	ldr	r1, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	461a      	mov	r2, r3
 80021ca:	6838      	ldr	r0, [r7, #0]
 80021cc:	f001 fb44 	bl	8003858 <memcpy>
	}
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021e0:	f001 f83c 	bl	800325c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ec:	e011      	b.n	8002212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3324      	adds	r3, #36	; 0x24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fc74 	bl	8002ae8 <xTaskRemoveFromEventList>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002206:	f000 fd49 	bl	8002c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	dce9      	bgt.n	80021ee <prvUnlockQueue+0x16>
 800221a:	e000      	b.n	800221e <prvUnlockQueue+0x46>
					break;
 800221c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002226:	f001 f849 	bl	80032bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800222a:	f001 f817 	bl	800325c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002236:	e011      	b.n	800225c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3310      	adds	r3, #16
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fc4f 	bl	8002ae8 <xTaskRemoveFromEventList>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002250:	f000 fd24 	bl	8002c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	3b01      	subs	r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800225c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002260:	2b00      	cmp	r3, #0
 8002262:	dce9      	bgt.n	8002238 <prvUnlockQueue+0x60>
 8002264:	e000      	b.n	8002268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002270:	f001 f824 	bl	80032bc <vPortExitCritical>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002284:	f000 ffea 	bl	800325c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002290:	2301      	movs	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e001      	b.n	800229a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800229a:	f001 f80f 	bl	80032bc <vPortExitCritical>

	return xReturn;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022b0:	f000 ffd4 	bl	800325c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d102      	bne.n	80022c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e001      	b.n	80022ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022ca:	f000 fff7 	bl	80032bc <vPortExitCritical>

	return xReturn;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	; 0x38
 80022dc:	af04      	add	r7, sp, #16
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <xTaskCreateStatic+0x2a>
	__asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	623b      	str	r3, [r7, #32]
}
 80022fe:	bf00      	nop
 8002300:	e7fe      	b.n	8002300 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xTaskCreateStatic+0x46>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	61fb      	str	r3, [r7, #28]
}
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800231e:	2354      	movs	r3, #84	; 0x54
 8002320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b54      	cmp	r3, #84	; 0x54
 8002326:	d00a      	beq.n	800233e <xTaskCreateStatic+0x66>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	61bb      	str	r3, [r7, #24]
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800233e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01e      	beq.n	8002384 <xTaskCreateStatic+0xac>
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01b      	beq.n	8002384 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002354:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800235e:	2300      	movs	r3, #0
 8002360:	9303      	str	r3, [sp, #12]
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f850 	bl	800241c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800237c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800237e:	f000 f8d5 	bl	800252c <prvAddNewTaskToReadyList>
 8002382:	e001      	b.n	8002388 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002388:	697b      	ldr	r3, [r7, #20]
	}
 800238a:	4618      	mov	r0, r3
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08c      	sub	sp, #48	; 0x30
 8002396:	af04      	add	r7, sp, #16
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f81a 	bl	80033e0 <pvPortMalloc>
 80023ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023b4:	2054      	movs	r0, #84	; 0x54
 80023b6:	f001 f813 	bl	80033e0 <pvPortMalloc>
 80023ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
 80023c8:	e005      	b.n	80023d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f001 f8d4 	bl	8003578 <vPortFree>
 80023d0:	e001      	b.n	80023d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d017      	beq.n	800240c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f80e 	bl	800241c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002400:	69f8      	ldr	r0, [r7, #28]
 8002402:	f000 f893 	bl	800252c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e002      	b.n	8002412 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
 8002410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002412:	69bb      	ldr	r3, [r7, #24]
	}
 8002414:	4618      	mov	r0, r3
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002434:	3b01      	subs	r3, #1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f023 0307 	bic.w	r3, r3, #7
 8002442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <prvInitialiseNewTask+0x48>
	__asm volatile
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	617b      	str	r3, [r7, #20]
}
 8002460:	bf00      	nop
 8002462:	e7fe      	b.n	8002462 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01f      	beq.n	80024aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e012      	b.n	8002496 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	7819      	ldrb	r1, [r3, #0]
 8002478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	3334      	adds	r3, #52	; 0x34
 8002480:	460a      	mov	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d9e9      	bls.n	8002470 <prvInitialiseNewTask+0x54>
 800249c:	e000      	b.n	80024a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800249e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	e003      	b.n	80024b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d901      	bls.n	80024bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024b8:	2306      	movs	r3, #6
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	2200      	movs	r2, #0
 80024cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	3304      	adds	r3, #4
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fabf 	bl	8001a56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	3318      	adds	r3, #24
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff faba 	bl	8001a56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	f1c3 0207 	rsb	r2, r3, #7
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	69b8      	ldr	r0, [r7, #24]
 800250c:	f000 fdb2 	bl	8003074 <pxPortInitialiseStack>
 8002510:	4602      	mov	r2, r0
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002522:	bf00      	nop
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002534:	f000 fe92 	bl	800325c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <prvAddNewTaskToReadyList+0xb8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <prvAddNewTaskToReadyList+0xb8>)
 8002540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <prvAddNewTaskToReadyList+0xbc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800254a:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <prvAddNewTaskToReadyList+0xbc>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <prvAddNewTaskToReadyList+0xb8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d110      	bne.n	800257a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002558:	f000 fbc4 	bl	8002ce4 <prvInitialiseTaskLists>
 800255c:	e00d      	b.n	800257a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <prvAddNewTaskToReadyList+0xc0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <prvAddNewTaskToReadyList+0xbc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	429a      	cmp	r2, r3
 8002572:	d802      	bhi.n	800257a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <prvAddNewTaskToReadyList+0xbc>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <prvAddNewTaskToReadyList+0xc4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <prvAddNewTaskToReadyList+0xc4>)
 8002582:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2201      	movs	r2, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <prvAddNewTaskToReadyList+0xc8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <prvAddNewTaskToReadyList+0xc8>)
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <prvAddNewTaskToReadyList+0xcc>)
 80025a4:	441a      	add	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7ff fa5e 	bl	8001a6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025b2:	f000 fe83 	bl	80032bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <prvAddNewTaskToReadyList+0xc0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00e      	beq.n	80025dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <prvAddNewTaskToReadyList+0xbc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <prvAddNewTaskToReadyList+0xd0>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000438 	.word	0x20000438
 80025e8:	20000338 	.word	0x20000338
 80025ec:	20000444 	.word	0x20000444
 80025f0:	20000454 	.word	0x20000454
 80025f4:	20000440 	.word	0x20000440
 80025f8:	2000033c 	.word	0x2000033c
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <vTaskDelay+0x60>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <vTaskDelay+0x30>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	60bb      	str	r3, [r7, #8]
}
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002630:	f000 f87a 	bl	8002728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002634:	2100      	movs	r1, #0
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fcb6 	bl	8002fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800263c:	f000 f882 	bl	8002744 <xTaskResumeAll>
 8002640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <vTaskDelay+0x64>)
 800264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000460 	.word	0x20000460
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002676:	463a      	mov	r2, r7
 8002678:	1d39      	adds	r1, r7, #4
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fd6e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	460a      	mov	r2, r1
 8002696:	491e      	ldr	r1, [pc, #120]	; (8002710 <vTaskStartScheduler+0xa8>)
 8002698:	481e      	ldr	r0, [pc, #120]	; (8002714 <vTaskStartScheduler+0xac>)
 800269a:	f7ff fe1d 	bl	80022d8 <xTaskCreateStatic>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <vTaskStartScheduler+0xb0>)
 80026a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <vTaskStartScheduler+0xb0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e001      	b.n	80026b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d116      	bne.n	80026ea <vTaskStartScheduler+0x82>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	613b      	str	r3, [r7, #16]
}
 80026ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <vTaskStartScheduler+0xb4>)
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295
 80026d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <vTaskStartScheduler+0xb8>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <vTaskStartScheduler+0xbc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026e4:	f000 fd48 	bl	8003178 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026e8:	e00e      	b.n	8002708 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d10a      	bne.n	8002708 <vTaskStartScheduler+0xa0>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	60fb      	str	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <vTaskStartScheduler+0x9e>
}
 8002708:	bf00      	nop
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	080043ec 	.word	0x080043ec
 8002714:	08002cb5 	.word	0x08002cb5
 8002718:	2000045c 	.word	0x2000045c
 800271c:	20000458 	.word	0x20000458
 8002720:	20000444 	.word	0x20000444
 8002724:	2000043c 	.word	0x2000043c

08002728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <vTaskSuspendAll+0x18>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	4a03      	ldr	r2, [pc, #12]	; (8002740 <vTaskSuspendAll+0x18>)
 8002734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000460 	.word	0x20000460

08002744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <xTaskResumeAll+0x114>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <xTaskResumeAll+0x2c>
	__asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	603b      	str	r3, [r7, #0]
}
 800276c:	bf00      	nop
 800276e:	e7fe      	b.n	800276e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002770:	f000 fd74 	bl	800325c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <xTaskResumeAll+0x114>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3b01      	subs	r3, #1
 800277a:	4a37      	ldr	r2, [pc, #220]	; (8002858 <xTaskResumeAll+0x114>)
 800277c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <xTaskResumeAll+0x114>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d161      	bne.n	800284a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <xTaskResumeAll+0x118>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d05d      	beq.n	800284a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800278e:	e02e      	b.n	80027ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <xTaskResumeAll+0x11c>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3318      	adds	r3, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f9c1 	bl	8001b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f9bc 	bl	8001b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <xTaskResumeAll+0x120>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <xTaskResumeAll+0x120>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4a27      	ldr	r2, [pc, #156]	; (8002868 <xTaskResumeAll+0x124>)
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f7ff f94a 	bl	8001a6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <xTaskResumeAll+0x128>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <xTaskResumeAll+0x12c>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <xTaskResumeAll+0x11c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1cc      	bne.n	8002790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027fc:	f000 fb10 	bl	8002e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <xTaskResumeAll+0x130>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d010      	beq.n	800282e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800280c:	f000 f836 	bl	800287c <xTaskIncrementTick>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <xTaskResumeAll+0x12c>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f1      	bne.n	800280c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <xTaskResumeAll+0x130>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <xTaskResumeAll+0x12c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002836:	2301      	movs	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <xTaskResumeAll+0x134>)
 800283c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800284a:	f000 fd37 	bl	80032bc <vPortExitCritical>

	return xAlreadyYielded;
 800284e:	68bb      	ldr	r3, [r7, #8]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000460 	.word	0x20000460
 800285c:	20000438 	.word	0x20000438
 8002860:	200003f8 	.word	0x200003f8
 8002864:	20000440 	.word	0x20000440
 8002868:	2000033c 	.word	0x2000033c
 800286c:	20000338 	.word	0x20000338
 8002870:	2000044c 	.word	0x2000044c
 8002874:	20000448 	.word	0x20000448
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002886:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <xTaskIncrementTick+0x144>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 808e 	bne.w	80029ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <xTaskIncrementTick+0x148>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002898:	4a4a      	ldr	r2, [pc, #296]	; (80029c4 <xTaskIncrementTick+0x148>)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d120      	bne.n	80028e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80028a4:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <xTaskIncrementTick+0x14c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	603b      	str	r3, [r7, #0]
}
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <xTaskIncrementTick+0x46>
 80028c4:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <xTaskIncrementTick+0x14c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <xTaskIncrementTick+0x150>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <xTaskIncrementTick+0x14c>)
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <xTaskIncrementTick+0x150>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <xTaskIncrementTick+0x154>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <xTaskIncrementTick+0x154>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	f000 fa9d 	bl	8002e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <xTaskIncrementTick+0x158>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d348      	bcc.n	8002982 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <xTaskIncrementTick+0x14c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <xTaskIncrementTick+0x158>)
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	601a      	str	r2, [r3, #0]
					break;
 8002902:	e03e      	b.n	8002982 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <xTaskIncrementTick+0x14c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d203      	bcs.n	8002924 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800291c:	4a2d      	ldr	r2, [pc, #180]	; (80029d4 <xTaskIncrementTick+0x158>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002922:	e02e      	b.n	8002982 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f8fb 	bl	8001b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3318      	adds	r3, #24
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f8f2 	bl	8001b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <xTaskIncrementTick+0x15c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <xTaskIncrementTick+0x15c>)
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <xTaskIncrementTick+0x160>)
 8002960:	441a      	add	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f7ff f880 	bl	8001a6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <xTaskIncrementTick+0x164>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	429a      	cmp	r2, r3
 800297a:	d3b9      	bcc.n	80028f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002980:	e7b6      	b.n	80028f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <xTaskIncrementTick+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	4914      	ldr	r1, [pc, #80]	; (80029dc <xTaskIncrementTick+0x160>)
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d901      	bls.n	800299e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <xTaskIncrementTick+0x168>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e004      	b.n	80029b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <xTaskIncrementTick+0x16c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <xTaskIncrementTick+0x16c>)
 80029b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000460 	.word	0x20000460
 80029c4:	2000043c 	.word	0x2000043c
 80029c8:	200003f0 	.word	0x200003f0
 80029cc:	200003f4 	.word	0x200003f4
 80029d0:	20000450 	.word	0x20000450
 80029d4:	20000458 	.word	0x20000458
 80029d8:	20000440 	.word	0x20000440
 80029dc:	2000033c 	.word	0x2000033c
 80029e0:	20000338 	.word	0x20000338
 80029e4:	2000044c 	.word	0x2000044c
 80029e8:	20000448 	.word	0x20000448

080029ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <vTaskSwitchContext+0xa0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <vTaskSwitchContext+0xa4>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a00:	e03f      	b.n	8002a82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <vTaskSwitchContext+0xa4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <vTaskSwitchContext+0xa8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f1c3 031f 	rsb	r3, r3, #31
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	491e      	ldr	r1, [pc, #120]	; (8002a98 <vTaskSwitchContext+0xac>)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	607b      	str	r3, [r7, #4]
}
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <vTaskSwitchContext+0x5a>
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <vTaskSwitchContext+0xac>)
 8002a54:	4413      	add	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d104      	bne.n	8002a78 <vTaskSwitchContext+0x8c>
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <vTaskSwitchContext+0xb0>)
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000460 	.word	0x20000460
 8002a90:	2000044c 	.word	0x2000044c
 8002a94:	20000440 	.word	0x20000440
 8002a98:	2000033c 	.word	0x2000033c
 8002a9c:	20000338 	.word	0x20000338

08002aa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	60fb      	str	r3, [r7, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <vTaskPlaceOnEventList+0x44>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3318      	adds	r3, #24
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fff0 	bl	8001ab4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f000 fa66 	bl	8002fa8 <prvAddCurrentTaskToDelayedList>
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000338 	.word	0x20000338

08002ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	60fb      	str	r3, [r7, #12]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3318      	adds	r3, #24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f803 	bl	8001b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <xTaskRemoveFromEventList+0xac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11c      	bne.n	8002b60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fffa 	bl	8001b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <xTaskRemoveFromEventList+0xb0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <xTaskRemoveFromEventList+0xb0>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <xTaskRemoveFromEventList+0xb4>)
 8002b50:	441a      	add	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7fe ff88 	bl	8001a6e <vListInsertEnd>
 8002b5e:	e005      	b.n	8002b6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3318      	adds	r3, #24
 8002b64:	4619      	mov	r1, r3
 8002b66:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <xTaskRemoveFromEventList+0xb8>)
 8002b68:	f7fe ff81 	bl	8001a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <xTaskRemoveFromEventList+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d905      	bls.n	8002b86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <xTaskRemoveFromEventList+0xc0>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e001      	b.n	8002b8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b8a:	697b      	ldr	r3, [r7, #20]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000460 	.word	0x20000460
 8002b98:	20000440 	.word	0x20000440
 8002b9c:	2000033c 	.word	0x2000033c
 8002ba0:	200003f8 	.word	0x200003f8
 8002ba4:	20000338 	.word	0x20000338
 8002ba8:	2000044c 	.word	0x2000044c

08002bac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <vTaskInternalSetTimeOutState+0x24>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <vTaskInternalSetTimeOutState+0x28>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000450 	.word	0x20000450
 8002bd4:	2000043c 	.word	0x2000043c

08002bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	613b      	str	r3, [r7, #16]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002c1a:	f000 fb1f 	bl	800325c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <xTaskCheckForTimeOut+0xbc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d102      	bne.n	8002c3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e023      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <xTaskCheckForTimeOut+0xc0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d007      	beq.n	8002c5a <xTaskCheckForTimeOut+0x82>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d302      	bcc.n	8002c5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e015      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d20b      	bcs.n	8002c7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff9b 	bl	8002bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e004      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c86:	f000 fb19 	bl	80032bc <vPortExitCritical>

	return xReturn;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000043c 	.word	0x2000043c
 8002c98:	20000450 	.word	0x20000450

08002c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <vTaskMissedYield+0x14>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000044c 	.word	0x2000044c

08002cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cbc:	f000 f852 	bl	8002d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <prvIdleTask+0x28>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d9f9      	bls.n	8002cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <prvIdleTask+0x2c>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cd8:	e7f0      	b.n	8002cbc <prvIdleTask+0x8>
 8002cda:	bf00      	nop
 8002cdc:	2000033c 	.word	0x2000033c
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	e00c      	b.n	8002d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <prvInitialiseTaskLists+0x60>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fe8a 	bl	8001a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3301      	adds	r3, #1
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d9ef      	bls.n	8002cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <prvInitialiseTaskLists+0x64>)
 8002d12:	f7fe fe81 	bl	8001a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d16:	480d      	ldr	r0, [pc, #52]	; (8002d4c <prvInitialiseTaskLists+0x68>)
 8002d18:	f7fe fe7e 	bl	8001a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <prvInitialiseTaskLists+0x6c>)
 8002d1e:	f7fe fe7b 	bl	8001a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <prvInitialiseTaskLists+0x70>)
 8002d24:	f7fe fe78 	bl	8001a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d28:	480b      	ldr	r0, [pc, #44]	; (8002d58 <prvInitialiseTaskLists+0x74>)
 8002d2a:	f7fe fe75 	bl	8001a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <prvInitialiseTaskLists+0x78>)
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <prvInitialiseTaskLists+0x64>)
 8002d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <prvInitialiseTaskLists+0x7c>)
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <prvInitialiseTaskLists+0x68>)
 8002d38:	601a      	str	r2, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000033c 	.word	0x2000033c
 8002d48:	200003c8 	.word	0x200003c8
 8002d4c:	200003dc 	.word	0x200003dc
 8002d50:	200003f8 	.word	0x200003f8
 8002d54:	2000040c 	.word	0x2000040c
 8002d58:	20000424 	.word	0x20000424
 8002d5c:	200003f0 	.word	0x200003f0
 8002d60:	200003f4 	.word	0x200003f4

08002d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d6a:	e019      	b.n	8002da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d6c:	f000 fa76 	bl	800325c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <prvCheckTasksWaitingTermination+0x50>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fed1 	bl	8001b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <prvCheckTasksWaitingTermination+0x54>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <prvCheckTasksWaitingTermination+0x54>)
 8002d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d96:	f000 fa91 	bl	80032bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f810 	bl	8002dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e1      	bne.n	8002d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000040c 	.word	0x2000040c
 8002db8:	20000438 	.word	0x20000438
 8002dbc:	20000420 	.word	0x20000420

08002dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fbce 	bl	8003578 <vPortFree>
				vPortFree( pxTCB );
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fbcb 	bl	8003578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002de2:	e018      	b.n	8002e16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d103      	bne.n	8002df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fbc2 	bl	8003578 <vPortFree>
	}
 8002df4:	e00f      	b.n	8002e16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d00a      	beq.n	8002e16 <prvDeleteTCB+0x56>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60fb      	str	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <prvDeleteTCB+0x54>
	}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <prvResetNextTaskUnblockTime+0x38>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <prvResetNextTaskUnblockTime+0x3c>)
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e38:	e008      	b.n	8002e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <prvResetNextTaskUnblockTime+0x38>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <prvResetNextTaskUnblockTime+0x3c>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200003f0 	.word	0x200003f0
 8002e5c:	20000458 	.word	0x20000458

08002e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <xTaskGetSchedulerState+0x34>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e008      	b.n	8002e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <xTaskGetSchedulerState+0x38>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	e001      	b.n	8002e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e86:	687b      	ldr	r3, [r7, #4]
	}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000444 	.word	0x20000444
 8002e98:	20000460 	.word	0x20000460

08002e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06e      	beq.n	8002f90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002eb2:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <xTaskPriorityDisinherit+0x100>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d00a      	beq.n	8002ed2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60fb      	str	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60bb      	str	r3, [r7, #8]
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d044      	beq.n	8002f90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d140      	bne.n	8002f90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fe06 	bl	8001b24 <uxListRemove>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d115      	bne.n	8002f4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	491f      	ldr	r1, [pc, #124]	; (8002fa0 <xTaskPriorityDisinherit+0x104>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xTaskPriorityDisinherit+0xae>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <xTaskPriorityDisinherit+0x108>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4013      	ands	r3, r2
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <xTaskPriorityDisinherit+0x108>)
 8002f48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f1c3 0207 	rsb	r2, r3, #7
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	2201      	movs	r2, #1
 8002f64:	409a      	lsls	r2, r3
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <xTaskPriorityDisinherit+0x108>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <xTaskPriorityDisinherit+0x108>)
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <xTaskPriorityDisinherit+0x104>)
 8002f7e:	441a      	add	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7fe fd71 	bl	8001a6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f90:	697b      	ldr	r3, [r7, #20]
	}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000338 	.word	0x20000338
 8002fa0:	2000033c 	.word	0x2000033c
 8002fa4:	20000440 	.word	0x20000440

08002fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fdb0 	bl	8001b24 <uxListRemove>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d10a      	bne.n	8003000 <prvAddCurrentTaskToDelayedList+0x58>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	481a      	ldr	r0, [pc, #104]	; (8003064 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002ffa:	f7fe fd38 	bl	8001a6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ffe:	e026      	b.n	800304e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d209      	bcs.n	800302c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f7fe fd45 	bl	8001ab4 <vListInsert>
}
 800302a:	e010      	b.n	800304e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <prvAddCurrentTaskToDelayedList+0xc4>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f7fe fd3b 	bl	8001ab4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d202      	bcs.n	800304e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6013      	str	r3, [r2, #0]
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000043c 	.word	0x2000043c
 800305c:	20000338 	.word	0x20000338
 8003060:	20000440 	.word	0x20000440
 8003064:	20000424 	.word	0x20000424
 8003068:	200003f4 	.word	0x200003f4
 800306c:	200003f0 	.word	0x200003f0
 8003070:	20000458 	.word	0x20000458

08003074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3b04      	subs	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800308c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3b04      	subs	r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b04      	subs	r3, #4
 80030a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030a4:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <pxPortInitialiseStack+0x54>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b14      	subs	r3, #20
 80030ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b20      	subs	r3, #32
 80030ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	080030cd 	.word	0x080030cd

080030cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <prvTaskExitError+0x54>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d00a      	beq.n	80030f6 <prvTaskExitError+0x2a>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	60fb      	str	r3, [r7, #12]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <prvTaskExitError+0x28>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60bb      	str	r3, [r7, #8]
}
 8003108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800310a:	bf00      	nop
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0fc      	beq.n	800310c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000000c 	.word	0x2000000c
	...

08003130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <pxCurrentTCBConst2>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800313a:	f380 8809 	msr	PSP, r0
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	f04e 0e0d 	orr.w	lr, lr, #13
 800314e:	4770      	bx	lr

08003150 <pxCurrentTCBConst2>:
 8003150:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003158:	4806      	ldr	r0, [pc, #24]	; (8003174 <prvPortStartFirstTask+0x1c>)
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	6800      	ldr	r0, [r0, #0]
 800315e:	f380 8808 	msr	MSP, r0
 8003162:	b662      	cpsie	i
 8003164:	b661      	cpsie	f
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	df00      	svc	0
 8003170:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003172:	bf00      	nop
 8003174:	e000ed08 	.word	0xe000ed08

08003178 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800317e:	4b32      	ldr	r3, [pc, #200]	; (8003248 <xPortStartScheduler+0xd0>)
 8003180:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <xPortStartScheduler+0xd4>)
 80031a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <xPortStartScheduler+0xd8>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ac:	e009      	b.n	80031c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <xPortStartScheduler+0xd8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <xPortStartScheduler+0xd8>)
 80031b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d0ef      	beq.n	80031ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <xPortStartScheduler+0xd8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00a      	beq.n	80031f0 <xPortStartScheduler+0x78>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	60bb      	str	r3, [r7, #8]
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <xPortStartScheduler+0xd8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <xPortStartScheduler+0xd8>)
 80031f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <xPortStartScheduler+0xd8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <xPortStartScheduler+0xd8>)
 8003204:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <xPortStartScheduler+0xdc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <xPortStartScheduler+0xdc>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <xPortStartScheduler+0xdc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <xPortStartScheduler+0xdc>)
 8003220:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003224:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003226:	f000 f8b9 	bl	800339c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <xPortStartScheduler+0xe0>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003230:	f7ff ff92 	bl	8003158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003234:	f7ff fbda 	bl	80029ec <vTaskSwitchContext>
	prvTaskExitError();
 8003238:	f7ff ff48 	bl	80030cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000e400 	.word	0xe000e400
 800324c:	20000464 	.word	0x20000464
 8003250:	20000468 	.word	0x20000468
 8003254:	e000ed20 	.word	0xe000ed20
 8003258:	2000000c 	.word	0x2000000c

0800325c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	607b      	str	r3, [r7, #4]
}
 8003274:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <vPortEnterCritical+0x58>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <vPortEnterCritical+0x58>)
 800327e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <vPortEnterCritical+0x58>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10f      	bne.n	80032a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <vPortEnterCritical+0x5c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	603b      	str	r3, [r7, #0]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <vPortEnterCritical+0x4a>
	}
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <vPortExitCritical+0x4c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <vPortExitCritical+0x24>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	607b      	str	r3, [r7, #4]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <vPortExitCritical+0x4c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <vPortExitCritical+0x4c>)
 80032e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <vPortExitCritical+0x4c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <vPortExitCritical+0x42>
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	2000000c 	.word	0x2000000c
 800330c:	00000000 	.word	0x00000000

08003310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003320:	6010      	str	r0, [r2, #0]
 8003322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003326:	f04f 0050 	mov.w	r0, #80	; 0x50
 800332a:	f380 8811 	msr	BASEPRI, r0
 800332e:	f7ff fb5d 	bl	80029ec <vTaskSwitchContext>
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f380 8811 	msr	BASEPRI, r0
 800333a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003346:	f380 8809 	msr	PSP, r0
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	4770      	bx	lr

08003350 <pxCurrentTCBConst>:
 8003350:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
}
 8003370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003372:	f7ff fa83 	bl	800287c <xTaskIncrementTick>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <xPortSysTickHandler+0x40>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f383 8811 	msr	BASEPRI, r3
}
 800338e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <vPortSetupTimerInterrupt+0x30>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <vPortSetupTimerInterrupt+0x34>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <vPortSetupTimerInterrupt+0x38>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <vPortSetupTimerInterrupt+0x3c>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <vPortSetupTimerInterrupt+0x40>)
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033be:	4b03      	ldr	r3, [pc, #12]	; (80033cc <vPortSetupTimerInterrupt+0x30>)
 80033c0:	2207      	movs	r2, #7
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	e000e010 	.word	0xe000e010
 80033d0:	e000e018 	.word	0xe000e018
 80033d4:	20000000 	.word	0x20000000
 80033d8:	10624dd3 	.word	0x10624dd3
 80033dc:	e000e014 	.word	0xe000e014

080033e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80033ec:	f7ff f99c 	bl	8002728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80033f0:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <pvPortMalloc+0x180>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033f8:	f000 f920 	bl	800363c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <pvPortMalloc+0x184>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8093 	bne.w	8003530 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01d      	beq.n	800344c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003410:	2208      	movs	r2, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f023 0307 	bic.w	r3, r3, #7
 8003428:	3308      	adds	r3, #8
 800342a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <pvPortMalloc+0x6c>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d06e      	beq.n	8003530 <pvPortMalloc+0x150>
 8003452:	4b45      	ldr	r3, [pc, #276]	; (8003568 <pvPortMalloc+0x188>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d869      	bhi.n	8003530 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800345c:	4b43      	ldr	r3, [pc, #268]	; (800356c <pvPortMalloc+0x18c>)
 800345e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003460:	4b42      	ldr	r3, [pc, #264]	; (800356c <pvPortMalloc+0x18c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003466:	e004      	b.n	8003472 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d903      	bls.n	8003484 <pvPortMalloc+0xa4>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f1      	bne.n	8003468 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <pvPortMalloc+0x180>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	429a      	cmp	r2, r3
 800348c:	d050      	beq.n	8003530 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2208      	movs	r2, #8
 8003494:	4413      	add	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad2      	subs	r2, r2, r3
 80034a8:	2308      	movs	r3, #8
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d91f      	bls.n	80034f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <pvPortMalloc+0xf8>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	613b      	str	r3, [r7, #16]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad2      	subs	r2, r2, r3
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034ea:	69b8      	ldr	r0, [r7, #24]
 80034ec:	f000 f908 	bl	8003700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <pvPortMalloc+0x188>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <pvPortMalloc+0x188>)
 80034fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <pvPortMalloc+0x188>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <pvPortMalloc+0x190>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d203      	bcs.n	8003512 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <pvPortMalloc+0x188>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <pvPortMalloc+0x190>)
 8003510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <pvPortMalloc+0x184>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	431a      	orrs	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <pvPortMalloc+0x194>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <pvPortMalloc+0x194>)
 800352e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003530:	f7ff f908 	bl	8002744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <pvPortMalloc+0x174>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	60fb      	str	r3, [r7, #12]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <pvPortMalloc+0x172>
	return pvReturn;
 8003554:	69fb      	ldr	r3, [r7, #28]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20001074 	.word	0x20001074
 8003564:	20001088 	.word	0x20001088
 8003568:	20001078 	.word	0x20001078
 800356c:	2000106c 	.word	0x2000106c
 8003570:	2000107c 	.word	0x2000107c
 8003574:	20001080 	.word	0x20001080

08003578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d04d      	beq.n	8003626 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800358a:	2308      	movs	r3, #8
 800358c:	425b      	negs	r3, r3
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <vPortFree+0xb8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <vPortFree+0x44>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	60fb      	str	r3, [r7, #12]
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <vPortFree+0x62>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60bb      	str	r3, [r7, #8]
}
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <vPortFree+0xb8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01e      	beq.n	8003626 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11a      	bne.n	8003626 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <vPortFree+0xb8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003600:	f7ff f892 	bl	8002728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <vPortFree+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4413      	add	r3, r2
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <vPortFree+0xbc>)
 8003610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003612:	6938      	ldr	r0, [r7, #16]
 8003614:	f000 f874 	bl	8003700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <vPortFree+0xc0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	4a06      	ldr	r2, [pc, #24]	; (8003638 <vPortFree+0xc0>)
 8003620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003622:	f7ff f88f 	bl	8002744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20001088 	.word	0x20001088
 8003634:	20001078 	.word	0x20001078
 8003638:	20001084 	.word	0x20001084

0800363c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003642:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <prvHeapInit+0xac>)
 800364a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3307      	adds	r3, #7
 800365a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <prvHeapInit+0xac>)
 800366c:	4413      	add	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <prvHeapInit+0xb0>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <prvHeapInit+0xb0>)
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003688:	2208      	movs	r2, #8
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <prvHeapInit+0xb4>)
 800369c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <prvHeapInit+0xb4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <prvHeapInit+0xb4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	1ad2      	subs	r2, r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvHeapInit+0xb4>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <prvHeapInit+0xb8>)
 80036ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <prvHeapInit+0xbc>)
 80036d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <prvHeapInit+0xc0>)
 80036d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	2000046c 	.word	0x2000046c
 80036ec:	2000106c 	.word	0x2000106c
 80036f0:	20001074 	.word	0x20001074
 80036f4:	2000107c 	.word	0x2000107c
 80036f8:	20001078 	.word	0x20001078
 80036fc:	20001088 	.word	0x20001088

08003700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <prvInsertBlockIntoFreeList+0xa8>)
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e002      	b.n	8003714 <prvInsertBlockIntoFreeList+0x14>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d8f7      	bhi.n	800370e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4413      	add	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d108      	bne.n	8003742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d118      	bne.n	8003788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <prvInsertBlockIntoFreeList+0xac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d00d      	beq.n	800377e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e008      	b.n	8003790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <prvInsertBlockIntoFreeList+0xac>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e003      	b.n	8003790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d002      	beq.n	800379e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	2000106c 	.word	0x2000106c
 80037ac:	20001074 	.word	0x20001074

080037b0 <siprintf>:
 80037b0:	b40e      	push	{r1, r2, r3}
 80037b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037b6:	b500      	push	{lr}
 80037b8:	b09c      	sub	sp, #112	; 0x70
 80037ba:	ab1d      	add	r3, sp, #116	; 0x74
 80037bc:	9002      	str	r0, [sp, #8]
 80037be:	9006      	str	r0, [sp, #24]
 80037c0:	9107      	str	r1, [sp, #28]
 80037c2:	9104      	str	r1, [sp, #16]
 80037c4:	4808      	ldr	r0, [pc, #32]	; (80037e8 <siprintf+0x38>)
 80037c6:	4909      	ldr	r1, [pc, #36]	; (80037ec <siprintf+0x3c>)
 80037c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	a902      	add	r1, sp, #8
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	f000 f99c 	bl	8003b10 <_svfiprintf_r>
 80037d8:	2200      	movs	r2, #0
 80037da:	9b02      	ldr	r3, [sp, #8]
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	b01c      	add	sp, #112	; 0x70
 80037e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e4:	b003      	add	sp, #12
 80037e6:	4770      	bx	lr
 80037e8:	2000005c 	.word	0x2000005c
 80037ec:	ffff0208 	.word	0xffff0208

080037f0 <memset>:
 80037f0:	4603      	mov	r3, r0
 80037f2:	4402      	add	r2, r0
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d100      	bne.n	80037fa <memset+0xa>
 80037f8:	4770      	bx	lr
 80037fa:	f803 1b01 	strb.w	r1, [r3], #1
 80037fe:	e7f9      	b.n	80037f4 <memset+0x4>

08003800 <__errno>:
 8003800:	4b01      	ldr	r3, [pc, #4]	; (8003808 <__errno+0x8>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2000005c 	.word	0x2000005c

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	2600      	movs	r6, #0
 8003810:	4d0c      	ldr	r5, [pc, #48]	; (8003844 <__libc_init_array+0x38>)
 8003812:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	f000 fc7a 	bl	8004114 <_init>
 8003820:	2600      	movs	r6, #0
 8003822:	4d0a      	ldr	r5, [pc, #40]	; (800384c <__libc_init_array+0x40>)
 8003824:	4c0a      	ldr	r4, [pc, #40]	; (8003850 <__libc_init_array+0x44>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	08004454 	.word	0x08004454
 8003848:	08004454 	.word	0x08004454
 800384c:	08004454 	.word	0x08004454
 8003850:	08004458 	.word	0x08004458

08003854 <__retarget_lock_acquire_recursive>:
 8003854:	4770      	bx	lr

08003856 <__retarget_lock_release_recursive>:
 8003856:	4770      	bx	lr

08003858 <memcpy>:
 8003858:	440a      	add	r2, r1
 800385a:	4291      	cmp	r1, r2
 800385c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003860:	d100      	bne.n	8003864 <memcpy+0xc>
 8003862:	4770      	bx	lr
 8003864:	b510      	push	{r4, lr}
 8003866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800386a:	4291      	cmp	r1, r2
 800386c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003870:	d1f9      	bne.n	8003866 <memcpy+0xe>
 8003872:	bd10      	pop	{r4, pc}

08003874 <_free_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	d040      	beq.n	80038fe <_free_r+0x8a>
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f0c      	subs	r4, r1, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	18e4      	addlt	r4, r4, r3
 8003888:	f000 f8dc 	bl	8003a44 <__malloc_lock>
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <_free_r+0x8c>)
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x2c>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	4628      	mov	r0, r5
 8003898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800389c:	f000 b8d8 	b.w	8003a50 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x42>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x1e>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x4c>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x42>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1850      	adds	r0, r2, r1
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x6c>
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	4401      	add	r1, r0
 80038cc:	1850      	adds	r0, r2, r1
 80038ce:	4283      	cmp	r3, r0
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x22>
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4408      	add	r0, r1
 80038da:	6010      	str	r0, [r2, #0]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	e7da      	b.n	8003896 <_free_r+0x22>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x74>
 80038e2:	230c      	movs	r3, #12
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x22>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	1821      	adds	r1, r4, r0
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf01      	itttt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	1809      	addeq	r1, r1, r0
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	6054      	str	r4, [r2, #4]
 80038fc:	e7cb      	b.n	8003896 <_free_r+0x22>
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200011cc 	.word	0x200011cc

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0e      	ldr	r6, [pc, #56]	; (8003940 <sbrk_aligned+0x3c>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 fbaa 	bl	8004068 <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 fba5 	bl	8004068 <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d00a      	beq.n	8003938 <sbrk_aligned+0x34>
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d007      	beq.n	800393c <sbrk_aligned+0x38>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fb9a 	bl	8004068 <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d101      	bne.n	800393c <sbrk_aligned+0x38>
 8003938:	f04f 34ff 	mov.w	r4, #4294967295
 800393c:	4620      	mov	r0, r4
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	200011d0 	.word	0x200011d0

08003944 <_malloc_r>:
 8003944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003948:	1ccd      	adds	r5, r1, #3
 800394a:	f025 0503 	bic.w	r5, r5, #3
 800394e:	3508      	adds	r5, #8
 8003950:	2d0c      	cmp	r5, #12
 8003952:	bf38      	it	cc
 8003954:	250c      	movcc	r5, #12
 8003956:	2d00      	cmp	r5, #0
 8003958:	4607      	mov	r7, r0
 800395a:	db01      	blt.n	8003960 <_malloc_r+0x1c>
 800395c:	42a9      	cmp	r1, r5
 800395e:	d905      	bls.n	800396c <_malloc_r+0x28>
 8003960:	230c      	movs	r3, #12
 8003962:	2600      	movs	r6, #0
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4630      	mov	r0, r6
 8003968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a40 <_malloc_r+0xfc>
 8003970:	f000 f868 	bl	8003a44 <__malloc_lock>
 8003974:	f8d8 3000 	ldr.w	r3, [r8]
 8003978:	461c      	mov	r4, r3
 800397a:	bb5c      	cbnz	r4, 80039d4 <_malloc_r+0x90>
 800397c:	4629      	mov	r1, r5
 800397e:	4638      	mov	r0, r7
 8003980:	f7ff ffc0 	bl	8003904 <sbrk_aligned>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	4604      	mov	r4, r0
 8003988:	d155      	bne.n	8003a36 <_malloc_r+0xf2>
 800398a:	f8d8 4000 	ldr.w	r4, [r8]
 800398e:	4626      	mov	r6, r4
 8003990:	2e00      	cmp	r6, #0
 8003992:	d145      	bne.n	8003a20 <_malloc_r+0xdc>
 8003994:	2c00      	cmp	r4, #0
 8003996:	d048      	beq.n	8003a2a <_malloc_r+0xe6>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	4631      	mov	r1, r6
 800399c:	4638      	mov	r0, r7
 800399e:	eb04 0903 	add.w	r9, r4, r3
 80039a2:	f000 fb61 	bl	8004068 <_sbrk_r>
 80039a6:	4581      	cmp	r9, r0
 80039a8:	d13f      	bne.n	8003a2a <_malloc_r+0xe6>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	4638      	mov	r0, r7
 80039ae:	1a6d      	subs	r5, r5, r1
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7ff ffa7 	bl	8003904 <sbrk_aligned>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d037      	beq.n	8003a2a <_malloc_r+0xe6>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	442b      	add	r3, r5
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	f8d8 3000 	ldr.w	r3, [r8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d038      	beq.n	8003a3a <_malloc_r+0xf6>
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	42a2      	cmp	r2, r4
 80039cc:	d12b      	bne.n	8003a26 <_malloc_r+0xe2>
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e00f      	b.n	80039f4 <_malloc_r+0xb0>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	1b52      	subs	r2, r2, r5
 80039d8:	d41f      	bmi.n	8003a1a <_malloc_r+0xd6>
 80039da:	2a0b      	cmp	r2, #11
 80039dc:	d917      	bls.n	8003a0e <_malloc_r+0xca>
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	6025      	str	r5, [r4, #0]
 80039e4:	bf18      	it	ne
 80039e6:	6059      	strne	r1, [r3, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	bf08      	it	eq
 80039ec:	f8c8 1000 	streq.w	r1, [r8]
 80039f0:	5162      	str	r2, [r4, r5]
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	4638      	mov	r0, r7
 80039f6:	f104 060b 	add.w	r6, r4, #11
 80039fa:	f000 f829 	bl	8003a50 <__malloc_unlock>
 80039fe:	f026 0607 	bic.w	r6, r6, #7
 8003a02:	1d23      	adds	r3, r4, #4
 8003a04:	1af2      	subs	r2, r6, r3
 8003a06:	d0ae      	beq.n	8003966 <_malloc_r+0x22>
 8003a08:	1b9b      	subs	r3, r3, r6
 8003a0a:	50a3      	str	r3, [r4, r2]
 8003a0c:	e7ab      	b.n	8003966 <_malloc_r+0x22>
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	6862      	ldr	r2, [r4, #4]
 8003a12:	d1dd      	bne.n	80039d0 <_malloc_r+0x8c>
 8003a14:	f8c8 2000 	str.w	r2, [r8]
 8003a18:	e7ec      	b.n	80039f4 <_malloc_r+0xb0>
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	6864      	ldr	r4, [r4, #4]
 8003a1e:	e7ac      	b.n	800397a <_malloc_r+0x36>
 8003a20:	4634      	mov	r4, r6
 8003a22:	6876      	ldr	r6, [r6, #4]
 8003a24:	e7b4      	b.n	8003990 <_malloc_r+0x4c>
 8003a26:	4613      	mov	r3, r2
 8003a28:	e7cc      	b.n	80039c4 <_malloc_r+0x80>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	f000 f80e 	bl	8003a50 <__malloc_unlock>
 8003a34:	e797      	b.n	8003966 <_malloc_r+0x22>
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	e7dc      	b.n	80039f4 <_malloc_r+0xb0>
 8003a3a:	605b      	str	r3, [r3, #4]
 8003a3c:	deff      	udf	#255	; 0xff
 8003a3e:	bf00      	nop
 8003a40:	200011cc 	.word	0x200011cc

08003a44 <__malloc_lock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_lock+0x8>)
 8003a46:	f7ff bf05 	b.w	8003854 <__retarget_lock_acquire_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	200011c8 	.word	0x200011c8

08003a50 <__malloc_unlock>:
 8003a50:	4801      	ldr	r0, [pc, #4]	; (8003a58 <__malloc_unlock+0x8>)
 8003a52:	f7ff bf00 	b.w	8003856 <__retarget_lock_release_recursive>
 8003a56:	bf00      	nop
 8003a58:	200011c8 	.word	0x200011c8

08003a5c <__ssputs_r>:
 8003a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a60:	461f      	mov	r7, r3
 8003a62:	688e      	ldr	r6, [r1, #8]
 8003a64:	4682      	mov	sl, r0
 8003a66:	42be      	cmp	r6, r7
 8003a68:	460c      	mov	r4, r1
 8003a6a:	4690      	mov	r8, r2
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	d82c      	bhi.n	8003aca <__ssputs_r+0x6e>
 8003a70:	898a      	ldrh	r2, [r1, #12]
 8003a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a76:	d026      	beq.n	8003ac6 <__ssputs_r+0x6a>
 8003a78:	6965      	ldr	r5, [r4, #20]
 8003a7a:	6909      	ldr	r1, [r1, #16]
 8003a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a80:	eba3 0901 	sub.w	r9, r3, r1
 8003a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a88:	1c7b      	adds	r3, r7, #1
 8003a8a:	444b      	add	r3, r9
 8003a8c:	106d      	asrs	r5, r5, #1
 8003a8e:	429d      	cmp	r5, r3
 8003a90:	bf38      	it	cc
 8003a92:	461d      	movcc	r5, r3
 8003a94:	0553      	lsls	r3, r2, #21
 8003a96:	d527      	bpl.n	8003ae8 <__ssputs_r+0x8c>
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7ff ff53 	bl	8003944 <_malloc_r>
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	b360      	cbz	r0, 8003afc <__ssputs_r+0xa0>
 8003aa2:	464a      	mov	r2, r9
 8003aa4:	6921      	ldr	r1, [r4, #16]
 8003aa6:	f7ff fed7 	bl	8003858 <memcpy>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	6126      	str	r6, [r4, #16]
 8003ab8:	444e      	add	r6, r9
 8003aba:	6026      	str	r6, [r4, #0]
 8003abc:	463e      	mov	r6, r7
 8003abe:	6165      	str	r5, [r4, #20]
 8003ac0:	eba5 0509 	sub.w	r5, r5, r9
 8003ac4:	60a5      	str	r5, [r4, #8]
 8003ac6:	42be      	cmp	r6, r7
 8003ac8:	d900      	bls.n	8003acc <__ssputs_r+0x70>
 8003aca:	463e      	mov	r6, r7
 8003acc:	4632      	mov	r2, r6
 8003ace:	4641      	mov	r1, r8
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	f000 faaf 	bl	8004034 <memmove>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	68a3      	ldr	r3, [r4, #8]
 8003ada:	1b9b      	subs	r3, r3, r6
 8003adc:	60a3      	str	r3, [r4, #8]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	4433      	add	r3, r6
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae8:	462a      	mov	r2, r5
 8003aea:	f000 fadb 	bl	80040a4 <_realloc_r>
 8003aee:	4606      	mov	r6, r0
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d1e0      	bne.n	8003ab6 <__ssputs_r+0x5a>
 8003af4:	4650      	mov	r0, sl
 8003af6:	6921      	ldr	r1, [r4, #16]
 8003af8:	f7ff febc 	bl	8003874 <_free_r>
 8003afc:	230c      	movs	r3, #12
 8003afe:	f8ca 3000 	str.w	r3, [sl]
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	e7e9      	b.n	8003ae4 <__ssputs_r+0x88>

08003b10 <_svfiprintf_r>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	4698      	mov	r8, r3
 8003b16:	898b      	ldrh	r3, [r1, #12]
 8003b18:	4607      	mov	r7, r0
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	b09d      	sub	sp, #116	; 0x74
 8003b22:	d50e      	bpl.n	8003b42 <_svfiprintf_r+0x32>
 8003b24:	690b      	ldr	r3, [r1, #16]
 8003b26:	b963      	cbnz	r3, 8003b42 <_svfiprintf_r+0x32>
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	f7ff ff0b 	bl	8003944 <_malloc_r>
 8003b2e:	6028      	str	r0, [r5, #0]
 8003b30:	6128      	str	r0, [r5, #16]
 8003b32:	b920      	cbnz	r0, 8003b3e <_svfiprintf_r+0x2e>
 8003b34:	230c      	movs	r3, #12
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	e0d0      	b.n	8003ce0 <_svfiprintf_r+0x1d0>
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	616b      	str	r3, [r5, #20]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9309      	str	r3, [sp, #36]	; 0x24
 8003b46:	2320      	movs	r3, #32
 8003b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4c:	2330      	movs	r3, #48	; 0x30
 8003b4e:	f04f 0901 	mov.w	r9, #1
 8003b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003cf8 <_svfiprintf_r+0x1e8>
 8003b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b5e:	4623      	mov	r3, r4
 8003b60:	469a      	mov	sl, r3
 8003b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b66:	b10a      	cbz	r2, 8003b6c <_svfiprintf_r+0x5c>
 8003b68:	2a25      	cmp	r2, #37	; 0x25
 8003b6a:	d1f9      	bne.n	8003b60 <_svfiprintf_r+0x50>
 8003b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b70:	d00b      	beq.n	8003b8a <_svfiprintf_r+0x7a>
 8003b72:	465b      	mov	r3, fp
 8003b74:	4622      	mov	r2, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff ff6f 	bl	8003a5c <__ssputs_r>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	f000 80a9 	beq.w	8003cd6 <_svfiprintf_r+0x1c6>
 8003b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b86:	445a      	add	r2, fp
 8003b88:	9209      	str	r2, [sp, #36]	; 0x24
 8003b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a1 	beq.w	8003cd6 <_svfiprintf_r+0x1c6>
 8003b94:	2300      	movs	r3, #0
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b9e:	f10a 0a01 	add.w	sl, sl, #1
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	9307      	str	r3, [sp, #28]
 8003ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003baa:	931a      	str	r3, [sp, #104]	; 0x68
 8003bac:	4654      	mov	r4, sl
 8003bae:	2205      	movs	r2, #5
 8003bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb4:	4850      	ldr	r0, [pc, #320]	; (8003cf8 <_svfiprintf_r+0x1e8>)
 8003bb6:	f000 fa67 	bl	8004088 <memchr>
 8003bba:	9a04      	ldr	r2, [sp, #16]
 8003bbc:	b9d8      	cbnz	r0, 8003bf6 <_svfiprintf_r+0xe6>
 8003bbe:	06d0      	lsls	r0, r2, #27
 8003bc0:	bf44      	itt	mi
 8003bc2:	2320      	movmi	r3, #32
 8003bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc8:	0711      	lsls	r1, r2, #28
 8003bca:	bf44      	itt	mi
 8003bcc:	232b      	movmi	r3, #43	; 0x2b
 8003bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd8:	d015      	beq.n	8003c06 <_svfiprintf_r+0xf6>
 8003bda:	4654      	mov	r4, sl
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f04f 0c0a 	mov.w	ip, #10
 8003be2:	9a07      	ldr	r2, [sp, #28]
 8003be4:	4621      	mov	r1, r4
 8003be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bea:	3b30      	subs	r3, #48	; 0x30
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d94d      	bls.n	8003c8c <_svfiprintf_r+0x17c>
 8003bf0:	b1b0      	cbz	r0, 8003c20 <_svfiprintf_r+0x110>
 8003bf2:	9207      	str	r2, [sp, #28]
 8003bf4:	e014      	b.n	8003c20 <_svfiprintf_r+0x110>
 8003bf6:	eba0 0308 	sub.w	r3, r0, r8
 8003bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	46a2      	mov	sl, r4
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	e7d2      	b.n	8003bac <_svfiprintf_r+0x9c>
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	1d19      	adds	r1, r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	9103      	str	r1, [sp, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfbb      	ittet	lt
 8003c12:	425b      	neglt	r3, r3
 8003c14:	f042 0202 	orrlt.w	r2, r2, #2
 8003c18:	9307      	strge	r3, [sp, #28]
 8003c1a:	9307      	strlt	r3, [sp, #28]
 8003c1c:	bfb8      	it	lt
 8003c1e:	9204      	strlt	r2, [sp, #16]
 8003c20:	7823      	ldrb	r3, [r4, #0]
 8003c22:	2b2e      	cmp	r3, #46	; 0x2e
 8003c24:	d10c      	bne.n	8003c40 <_svfiprintf_r+0x130>
 8003c26:	7863      	ldrb	r3, [r4, #1]
 8003c28:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2a:	d134      	bne.n	8003c96 <_svfiprintf_r+0x186>
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	3402      	adds	r4, #2
 8003c30:	1d1a      	adds	r2, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9203      	str	r2, [sp, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfb8      	it	lt
 8003c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003cfc <_svfiprintf_r+0x1ec>
 8003c44:	2203      	movs	r2, #3
 8003c46:	4650      	mov	r0, sl
 8003c48:	7821      	ldrb	r1, [r4, #0]
 8003c4a:	f000 fa1d 	bl	8004088 <memchr>
 8003c4e:	b138      	cbz	r0, 8003c60 <_svfiprintf_r+0x150>
 8003c50:	2240      	movs	r2, #64	; 0x40
 8003c52:	9b04      	ldr	r3, [sp, #16]
 8003c54:	eba0 000a 	sub.w	r0, r0, sl
 8003c58:	4082      	lsls	r2, r0
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	2206      	movs	r2, #6
 8003c66:	4826      	ldr	r0, [pc, #152]	; (8003d00 <_svfiprintf_r+0x1f0>)
 8003c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c6c:	f000 fa0c 	bl	8004088 <memchr>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d038      	beq.n	8003ce6 <_svfiprintf_r+0x1d6>
 8003c74:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <_svfiprintf_r+0x1f4>)
 8003c76:	bb1b      	cbnz	r3, 8003cc0 <_svfiprintf_r+0x1b0>
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	3307      	adds	r3, #7
 8003c7c:	f023 0307 	bic.w	r3, r3, #7
 8003c80:	3308      	adds	r3, #8
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c86:	4433      	add	r3, r6
 8003c88:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8a:	e768      	b.n	8003b5e <_svfiprintf_r+0x4e>
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	2001      	movs	r0, #1
 8003c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c94:	e7a6      	b.n	8003be4 <_svfiprintf_r+0xd4>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f04f 0c0a 	mov.w	ip, #10
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	3401      	adds	r4, #1
 8003ca0:	9305      	str	r3, [sp, #20]
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca8:	3a30      	subs	r2, #48	; 0x30
 8003caa:	2a09      	cmp	r2, #9
 8003cac:	d903      	bls.n	8003cb6 <_svfiprintf_r+0x1a6>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0c6      	beq.n	8003c40 <_svfiprintf_r+0x130>
 8003cb2:	9105      	str	r1, [sp, #20]
 8003cb4:	e7c4      	b.n	8003c40 <_svfiprintf_r+0x130>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	2301      	movs	r3, #1
 8003cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cbe:	e7f0      	b.n	8003ca2 <_svfiprintf_r+0x192>
 8003cc0:	ab03      	add	r3, sp, #12
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <_svfiprintf_r+0x1f8>)
 8003cca:	a904      	add	r1, sp, #16
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	1c42      	adds	r2, r0, #1
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	d1d6      	bne.n	8003c84 <_svfiprintf_r+0x174>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	065b      	lsls	r3, r3, #25
 8003cda:	f53f af2d 	bmi.w	8003b38 <_svfiprintf_r+0x28>
 8003cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ce0:	b01d      	add	sp, #116	; 0x74
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	ab03      	add	r3, sp, #12
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	462a      	mov	r2, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <_svfiprintf_r+0x1f8>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	f000 f87d 	bl	8003df0 <_printf_i>
 8003cf6:	e7eb      	b.n	8003cd0 <_svfiprintf_r+0x1c0>
 8003cf8:	0800441e 	.word	0x0800441e
 8003cfc:	08004424 	.word	0x08004424
 8003d00:	08004428 	.word	0x08004428
 8003d04:	00000000 	.word	0x00000000
 8003d08:	08003a5d 	.word	0x08003a5d

08003d0c <_printf_common>:
 8003d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	4616      	mov	r6, r2
 8003d12:	4699      	mov	r9, r3
 8003d14:	688a      	ldr	r2, [r1, #8]
 8003d16:	690b      	ldr	r3, [r1, #16]
 8003d18:	4607      	mov	r7, r0
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bfb8      	it	lt
 8003d1e:	4613      	movlt	r3, r2
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d26:	460c      	mov	r4, r1
 8003d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d2c:	b10a      	cbz	r2, 8003d32 <_printf_common+0x26>
 8003d2e:	3301      	adds	r3, #1
 8003d30:	6033      	str	r3, [r6, #0]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	0699      	lsls	r1, r3, #26
 8003d36:	bf42      	ittt	mi
 8003d38:	6833      	ldrmi	r3, [r6, #0]
 8003d3a:	3302      	addmi	r3, #2
 8003d3c:	6033      	strmi	r3, [r6, #0]
 8003d3e:	6825      	ldr	r5, [r4, #0]
 8003d40:	f015 0506 	ands.w	r5, r5, #6
 8003d44:	d106      	bne.n	8003d54 <_printf_common+0x48>
 8003d46:	f104 0a19 	add.w	sl, r4, #25
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	6832      	ldr	r2, [r6, #0]
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	42ab      	cmp	r3, r5
 8003d52:	dc2b      	bgt.n	8003dac <_printf_common+0xa0>
 8003d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d58:	1e13      	subs	r3, r2, #0
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	bf18      	it	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	0692      	lsls	r2, r2, #26
 8003d62:	d430      	bmi.n	8003dc6 <_printf_common+0xba>
 8003d64:	4649      	mov	r1, r9
 8003d66:	4638      	mov	r0, r7
 8003d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d6c:	47c0      	blx	r8
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d023      	beq.n	8003dba <_printf_common+0xae>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	6922      	ldr	r2, [r4, #16]
 8003d76:	f003 0306 	and.w	r3, r3, #6
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	bf14      	ite	ne
 8003d7e:	2500      	movne	r5, #0
 8003d80:	6833      	ldreq	r3, [r6, #0]
 8003d82:	f04f 0600 	mov.w	r6, #0
 8003d86:	bf08      	it	eq
 8003d88:	68e5      	ldreq	r5, [r4, #12]
 8003d8a:	f104 041a 	add.w	r4, r4, #26
 8003d8e:	bf08      	it	eq
 8003d90:	1aed      	subeq	r5, r5, r3
 8003d92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d96:	bf08      	it	eq
 8003d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bfc4      	itt	gt
 8003da0:	1a9b      	subgt	r3, r3, r2
 8003da2:	18ed      	addgt	r5, r5, r3
 8003da4:	42b5      	cmp	r5, r6
 8003da6:	d11a      	bne.n	8003dde <_printf_common+0xd2>
 8003da8:	2000      	movs	r0, #0
 8003daa:	e008      	b.n	8003dbe <_printf_common+0xb2>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4652      	mov	r2, sl
 8003db0:	4649      	mov	r1, r9
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c0      	blx	r8
 8003db6:	3001      	adds	r0, #1
 8003db8:	d103      	bne.n	8003dc2 <_printf_common+0xb6>
 8003dba:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc2:	3501      	adds	r5, #1
 8003dc4:	e7c1      	b.n	8003d4a <_printf_common+0x3e>
 8003dc6:	2030      	movs	r0, #48	; 0x30
 8003dc8:	18e1      	adds	r1, r4, r3
 8003dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dd4:	4422      	add	r2, r4
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ddc:	e7c2      	b.n	8003d64 <_printf_common+0x58>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4622      	mov	r2, r4
 8003de2:	4649      	mov	r1, r9
 8003de4:	4638      	mov	r0, r7
 8003de6:	47c0      	blx	r8
 8003de8:	3001      	adds	r0, #1
 8003dea:	d0e6      	beq.n	8003dba <_printf_common+0xae>
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7d9      	b.n	8003da4 <_printf_common+0x98>

08003df0 <_printf_i>:
 8003df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	7e0f      	ldrb	r7, [r1, #24]
 8003df6:	4691      	mov	r9, r2
 8003df8:	2f78      	cmp	r7, #120	; 0x78
 8003dfa:	4680      	mov	r8, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	469a      	mov	sl, r3
 8003e00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e06:	d807      	bhi.n	8003e18 <_printf_i+0x28>
 8003e08:	2f62      	cmp	r7, #98	; 0x62
 8003e0a:	d80a      	bhi.n	8003e22 <_printf_i+0x32>
 8003e0c:	2f00      	cmp	r7, #0
 8003e0e:	f000 80d5 	beq.w	8003fbc <_printf_i+0x1cc>
 8003e12:	2f58      	cmp	r7, #88	; 0x58
 8003e14:	f000 80c1 	beq.w	8003f9a <_printf_i+0x1aa>
 8003e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e20:	e03a      	b.n	8003e98 <_printf_i+0xa8>
 8003e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e26:	2b15      	cmp	r3, #21
 8003e28:	d8f6      	bhi.n	8003e18 <_printf_i+0x28>
 8003e2a:	a101      	add	r1, pc, #4	; (adr r1, 8003e30 <_printf_i+0x40>)
 8003e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e30:	08003e89 	.word	0x08003e89
 8003e34:	08003e9d 	.word	0x08003e9d
 8003e38:	08003e19 	.word	0x08003e19
 8003e3c:	08003e19 	.word	0x08003e19
 8003e40:	08003e19 	.word	0x08003e19
 8003e44:	08003e19 	.word	0x08003e19
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003e19 	.word	0x08003e19
 8003e50:	08003e19 	.word	0x08003e19
 8003e54:	08003e19 	.word	0x08003e19
 8003e58:	08003e19 	.word	0x08003e19
 8003e5c:	08003fa3 	.word	0x08003fa3
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003f5d 	.word	0x08003f5d
 8003e68:	08003e19 	.word	0x08003e19
 8003e6c:	08003e19 	.word	0x08003e19
 8003e70:	08003fc5 	.word	0x08003fc5
 8003e74:	08003e19 	.word	0x08003e19
 8003e78:	08003ec9 	.word	0x08003ec9
 8003e7c:	08003e19 	.word	0x08003e19
 8003e80:	08003e19 	.word	0x08003e19
 8003e84:	08003f65 	.word	0x08003f65
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	1d1a      	adds	r2, r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	602a      	str	r2, [r5, #0]
 8003e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0a0      	b.n	8003fde <_printf_i+0x1ee>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	0607      	lsls	r7, r0, #24
 8003ea2:	f103 0104 	add.w	r1, r3, #4
 8003ea6:	6029      	str	r1, [r5, #0]
 8003ea8:	d501      	bpl.n	8003eae <_printf_i+0xbe>
 8003eaa:	681e      	ldr	r6, [r3, #0]
 8003eac:	e003      	b.n	8003eb6 <_printf_i+0xc6>
 8003eae:	0646      	lsls	r6, r0, #25
 8003eb0:	d5fb      	bpl.n	8003eaa <_printf_i+0xba>
 8003eb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	da03      	bge.n	8003ec2 <_printf_i+0xd2>
 8003eba:	232d      	movs	r3, #45	; 0x2d
 8003ebc:	4276      	negs	r6, r6
 8003ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec2:	230a      	movs	r3, #10
 8003ec4:	4859      	ldr	r0, [pc, #356]	; (800402c <_printf_i+0x23c>)
 8003ec6:	e012      	b.n	8003eee <_printf_i+0xfe>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	6029      	str	r1, [r5, #0]
 8003ed0:	0605      	lsls	r5, r0, #24
 8003ed2:	d501      	bpl.n	8003ed8 <_printf_i+0xe8>
 8003ed4:	681e      	ldr	r6, [r3, #0]
 8003ed6:	e002      	b.n	8003ede <_printf_i+0xee>
 8003ed8:	0641      	lsls	r1, r0, #25
 8003eda:	d5fb      	bpl.n	8003ed4 <_printf_i+0xe4>
 8003edc:	881e      	ldrh	r6, [r3, #0]
 8003ede:	2f6f      	cmp	r7, #111	; 0x6f
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2308      	moveq	r3, #8
 8003ee4:	230a      	movne	r3, #10
 8003ee6:	4851      	ldr	r0, [pc, #324]	; (800402c <_printf_i+0x23c>)
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eee:	6865      	ldr	r5, [r4, #4]
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	bfa8      	it	ge
 8003ef4:	6821      	ldrge	r1, [r4, #0]
 8003ef6:	60a5      	str	r5, [r4, #8]
 8003ef8:	bfa4      	itt	ge
 8003efa:	f021 0104 	bicge.w	r1, r1, #4
 8003efe:	6021      	strge	r1, [r4, #0]
 8003f00:	b90e      	cbnz	r6, 8003f06 <_printf_i+0x116>
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	d04b      	beq.n	8003f9e <_printf_i+0x1ae>
 8003f06:	4615      	mov	r5, r2
 8003f08:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f0c:	fb03 6711 	mls	r7, r3, r1, r6
 8003f10:	5dc7      	ldrb	r7, [r0, r7]
 8003f12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f16:	4637      	mov	r7, r6
 8003f18:	42bb      	cmp	r3, r7
 8003f1a:	460e      	mov	r6, r1
 8003f1c:	d9f4      	bls.n	8003f08 <_printf_i+0x118>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x14a>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07de      	lsls	r6, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x14a>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6861      	ldr	r1, [r4, #4]
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	; 0x30
 8003f32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f3a:	1b52      	subs	r2, r2, r5
 8003f3c:	6122      	str	r2, [r4, #16]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	f7ff fedf 	bl	8003d0c <_printf_common>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d14a      	bne.n	8003fe8 <_printf_i+0x1f8>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2778      	movs	r7, #120	; 0x78
 8003f66:	4832      	ldr	r0, [pc, #200]	; (8004030 <_printf_i+0x240>)
 8003f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6829      	ldr	r1, [r5, #0]
 8003f70:	061f      	lsls	r7, r3, #24
 8003f72:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f76:	d402      	bmi.n	8003f7e <_printf_i+0x18e>
 8003f78:	065f      	lsls	r7, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2b6      	uxthmi	r6, r6
 8003f7e:	07df      	lsls	r7, r3, #31
 8003f80:	bf48      	it	mi
 8003f82:	f043 0320 	orrmi.w	r3, r3, #32
 8003f86:	6029      	str	r1, [r5, #0]
 8003f88:	bf48      	it	mi
 8003f8a:	6023      	strmi	r3, [r4, #0]
 8003f8c:	b91e      	cbnz	r6, 8003f96 <_printf_i+0x1a6>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f023 0320 	bic.w	r3, r3, #32
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	2310      	movs	r3, #16
 8003f98:	e7a6      	b.n	8003ee8 <_printf_i+0xf8>
 8003f9a:	4824      	ldr	r0, [pc, #144]	; (800402c <_printf_i+0x23c>)
 8003f9c:	e7e4      	b.n	8003f68 <_printf_i+0x178>
 8003f9e:	4615      	mov	r5, r2
 8003fa0:	e7bd      	b.n	8003f1e <_printf_i+0x12e>
 8003fa2:	682b      	ldr	r3, [r5, #0]
 8003fa4:	6826      	ldr	r6, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	6028      	str	r0, [r5, #0]
 8003fac:	0635      	lsls	r5, r6, #24
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0x1c6>
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0x1cc>
 8003fb6:	0670      	lsls	r0, r6, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0x1c2>
 8003fba:	8019      	strh	r1, [r3, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4615      	mov	r5, r2
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	e7bc      	b.n	8003f3e <_printf_i+0x14e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	602a      	str	r2, [r5, #0]
 8003fcc:	681d      	ldr	r5, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f859 	bl	8004088 <memchr>
 8003fd6:	b108      	cbz	r0, 8003fdc <_printf_i+0x1ec>
 8003fd8:	1b40      	subs	r0, r0, r5
 8003fda:	6060      	str	r0, [r4, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe6:	e7aa      	b.n	8003f3e <_printf_i+0x14e>
 8003fe8:	462a      	mov	r2, r5
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	47d0      	blx	sl
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0ad      	beq.n	8003f52 <_printf_i+0x162>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d413      	bmi.n	8004024 <_printf_i+0x234>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e7a6      	b.n	8003f56 <_printf_i+0x166>
 8004008:	2301      	movs	r3, #1
 800400a:	4632      	mov	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	4640      	mov	r0, r8
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d09d      	beq.n	8003f52 <_printf_i+0x162>
 8004016:	3501      	adds	r5, #1
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	9903      	ldr	r1, [sp, #12]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	42ab      	cmp	r3, r5
 8004020:	dcf2      	bgt.n	8004008 <_printf_i+0x218>
 8004022:	e7eb      	b.n	8003ffc <_printf_i+0x20c>
 8004024:	2500      	movs	r5, #0
 8004026:	f104 0619 	add.w	r6, r4, #25
 800402a:	e7f5      	b.n	8004018 <_printf_i+0x228>
 800402c:	0800442f 	.word	0x0800442f
 8004030:	08004440 	.word	0x08004440

08004034 <memmove>:
 8004034:	4288      	cmp	r0, r1
 8004036:	b510      	push	{r4, lr}
 8004038:	eb01 0402 	add.w	r4, r1, r2
 800403c:	d902      	bls.n	8004044 <memmove+0x10>
 800403e:	4284      	cmp	r4, r0
 8004040:	4623      	mov	r3, r4
 8004042:	d807      	bhi.n	8004054 <memmove+0x20>
 8004044:	1e43      	subs	r3, r0, #1
 8004046:	42a1      	cmp	r1, r4
 8004048:	d008      	beq.n	800405c <memmove+0x28>
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004052:	e7f8      	b.n	8004046 <memmove+0x12>
 8004054:	4601      	mov	r1, r0
 8004056:	4402      	add	r2, r0
 8004058:	428a      	cmp	r2, r1
 800405a:	d100      	bne.n	800405e <memmove+0x2a>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004066:	e7f7      	b.n	8004058 <memmove+0x24>

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	; (8004084 <_sbrk_r+0x1c>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc faf2 	bl	800065c <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200011c4 	.word	0x200011c4

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <_realloc_r>:
 80040a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a8:	4680      	mov	r8, r0
 80040aa:	4614      	mov	r4, r2
 80040ac:	460e      	mov	r6, r1
 80040ae:	b921      	cbnz	r1, 80040ba <_realloc_r+0x16>
 80040b0:	4611      	mov	r1, r2
 80040b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	f7ff bc45 	b.w	8003944 <_malloc_r>
 80040ba:	b92a      	cbnz	r2, 80040c8 <_realloc_r+0x24>
 80040bc:	f7ff fbda 	bl	8003874 <_free_r>
 80040c0:	4625      	mov	r5, r4
 80040c2:	4628      	mov	r0, r5
 80040c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c8:	f000 f81b 	bl	8004102 <_malloc_usable_size_r>
 80040cc:	4284      	cmp	r4, r0
 80040ce:	4607      	mov	r7, r0
 80040d0:	d802      	bhi.n	80040d8 <_realloc_r+0x34>
 80040d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040d6:	d812      	bhi.n	80040fe <_realloc_r+0x5a>
 80040d8:	4621      	mov	r1, r4
 80040da:	4640      	mov	r0, r8
 80040dc:	f7ff fc32 	bl	8003944 <_malloc_r>
 80040e0:	4605      	mov	r5, r0
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d0ed      	beq.n	80040c2 <_realloc_r+0x1e>
 80040e6:	42bc      	cmp	r4, r7
 80040e8:	4622      	mov	r2, r4
 80040ea:	4631      	mov	r1, r6
 80040ec:	bf28      	it	cs
 80040ee:	463a      	movcs	r2, r7
 80040f0:	f7ff fbb2 	bl	8003858 <memcpy>
 80040f4:	4631      	mov	r1, r6
 80040f6:	4640      	mov	r0, r8
 80040f8:	f7ff fbbc 	bl	8003874 <_free_r>
 80040fc:	e7e1      	b.n	80040c2 <_realloc_r+0x1e>
 80040fe:	4635      	mov	r5, r6
 8004100:	e7df      	b.n	80040c2 <_realloc_r+0x1e>

08004102 <_malloc_usable_size_r>:
 8004102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004106:	1f18      	subs	r0, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	bfbc      	itt	lt
 800410c:	580b      	ldrlt	r3, [r1, r0]
 800410e:	18c0      	addlt	r0, r0, r3
 8004110:	4770      	bx	lr
	...

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
